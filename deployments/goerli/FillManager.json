{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messenger",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "fillId",
          "type": "bytes32"
        }
      ],
      "name": "FillInvalidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "LpAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "LpRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fillId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "filler",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RequestFilled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLp",
          "type": "address"
        }
      ],
      "name": "addAllowedLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedLps",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "targetTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "targetReceiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "nonce",
          "type": "uint96"
        }
      ],
      "name": "fillRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fills",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "fillId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        }
      ],
      "name": "invalidateFill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Resolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messenger",
      "outputs": [
        {
          "internalType": "contract IMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldLp",
          "type": "address"
        }
      ],
      "name": "removeAllowedLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Resolver",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/Users/gb/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/access/Ownable.sol",
    "16": "contracts/contracts/BeamerUtils.sol",
    "17": "contracts/contracts/FillManager.sol",
    "18": "contracts/contracts/LpWhitelist.sol",
    "28": "contracts/interfaces/IMessenger.sol",
    "3": "/Users/gb/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/token/ERC20/IERC20.sol",
    "5": "/Users/gb/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
    "6": "/Users/gb/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/token/ERC20/utils/SafeERC20.sol",
    "7": "/Users/gb/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/utils/Address.sol",
    "8": "/Users/gb/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "contracts/contracts/FillManager.sol",
    "exportedSymbols": {
      "Address": [
        6091
      ],
      "BeamerUtils": [
        32
      ],
      "Context": [
        5725
      ],
      "FillManager": [
        318
      ],
      "IERC20": [
        3070
      ],
      "IERC20Permit": [
        5761
      ],
      "IMessenger": [
        3373
      ],
      "LpWhitelist": [
        390
      ],
      "Math": [
        4933
      ],
      "Ownable": [
        2992
      ],
      "Pausable": [
        4068
      ],
      "RequestManager": [
        2101
      ],
      "Resolver": [
        2269
      ],
      "RestrictedCalls": [
        2424
      ],
      "SafeERC20": [
        3351
      ]
    },
    "id": 319,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 34,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:17"
      },
      {
        "absolutePath": "/Users/gb/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/token/ERC20/IERC20.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/token/ERC20/IERC20.sol",
        "id": 35,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 319,
        "sourceUnit": 3071,
        "src": "58:84:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/gb/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/token/ERC20/utils/SafeERC20.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/token/ERC20/utils/SafeERC20.sol",
        "id": 36,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 319,
        "sourceUnit": 3352,
        "src": "143:93:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/gb/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/access/Ownable.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/access/Ownable.sol",
        "id": 37,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 319,
        "sourceUnit": 2993,
        "src": "237:80:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/contracts/LpWhitelist.sol",
        "file": "./LpWhitelist.sol",
        "id": 38,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 319,
        "sourceUnit": 391,
        "src": "318:27:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/interfaces/IMessenger.sol",
        "file": "../interfaces/IMessenger.sol",
        "id": 39,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 319,
        "sourceUnit": 3374,
        "src": "346:38:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/contracts/BeamerUtils.sol",
        "file": "./BeamerUtils.sol",
        "id": 40,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 319,
        "sourceUnit": 33,
        "src": "385:27:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/contracts/Resolver.sol",
        "file": "./Resolver.sol",
        "id": 41,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 319,
        "sourceUnit": 2270,
        "src": "413:24:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 43,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2992,
              "src": "806:7:17"
            },
            "id": 44,
            "nodeType": "InheritanceSpecifier",
            "src": "806:7:17"
          },
          {
            "baseName": {
              "id": 45,
              "name": "LpWhitelist",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 390,
              "src": "815:11:17"
            },
            "id": 46,
            "nodeType": "InheritanceSpecifier",
            "src": "815:11:17"
          }
        ],
        "canonicalName": "FillManager",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 42,
          "nodeType": "StructuredDocumentation",
          "src": "439:343:17",
          "text": "The fill manager.\n This contract is responsible for keeping track of filled requests. In addition to allowing\n agents to (eventually) prove that they filled requests, it also allows anyone to invalidate\n a claim that a request was filled.\n It is the only contract that agents need to interact with on the target chain."
        },
        "fullyImplemented": true,
        "id": 318,
        "linearizedBaseContracts": [
          318,
          390,
          2992,
          5725
        ],
        "name": "FillManager",
        "nameLocation": "791:11:17",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 50,
            "libraryName": {
              "id": 47,
              "name": "SafeERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3351,
              "src": "839:9:17"
            },
            "nodeType": "UsingForDirective",
            "src": "833:27:17",
            "typeName": {
              "id": 49,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 48,
                "name": "IERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3070,
                "src": "853:6:17"
              },
              "referencedDeclaration": 3070,
              "src": "853:6:17",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$3070",
                "typeString": "contract IERC20"
              }
            }
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 51,
              "nodeType": "StructuredDocumentation",
              "src": "866:96:17",
              "text": "Emitted when a request has been filled.\n .. seealso:: :sol:func:`fillRequest`"
            },
            "eventSelector": "2995401b199bc45ea8c8b79c27fb204b270cfb74444d546b1a100935e3443887",
            "id": 65,
            "name": "RequestFilled",
            "nameLocation": "973:13:17",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 64,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 53,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "1012:9:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "996:25:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 52,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "996:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "fillId",
                  "nameLocation": "1039:6:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1031:14:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 54,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1031:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sourceChainId",
                  "nameLocation": "1071:13:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1055:29:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 56,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1055:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "targetTokenAddress",
                  "nameLocation": "1110:18:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1094:34:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1094:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "filler",
                  "nameLocation": "1146:6:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1138:14:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 60,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1138:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 63,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1170:6:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1162:14:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 62,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1162:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "986:196:17"
            },
            "src": "967:216:17"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 66,
              "nodeType": "StructuredDocumentation",
              "src": "1189:101:17",
              "text": "Emitted when a fill has been invalidated.\n .. seealso:: :sol:func:`invalidateFill`"
            },
            "eventSelector": "931b401cf9baede43dc97f7d9dd4017d44f22bfa0a69668d527d9b5fff42b90a",
            "id": 72,
            "name": "FillInvalidated",
            "nameLocation": "1301:15:17",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 71,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 68,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "1333:9:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 72,
                  "src": "1317:25:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 67,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1317:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 70,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "fillId",
                  "nameLocation": "1360:6:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 72,
                  "src": "1344:22:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 69,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1344:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1316:51:17"
            },
            "src": "1295:73:17"
          },
          {
            "constant": false,
            "functionSelector": "3cb747bf",
            "id": 75,
            "mutability": "immutable",
            "name": "messenger",
            "nameLocation": "1593:9:17",
            "nodeType": "VariableDeclaration",
            "scope": 318,
            "src": "1565:37:17",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IMessenger_$3373",
              "typeString": "contract IMessenger"
            },
            "typeName": {
              "id": 74,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 73,
                "name": "IMessenger",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3373,
                "src": "1565:10:17"
              },
              "referencedDeclaration": 3373,
              "src": "1565:10:17",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IMessenger_$3373",
                "typeString": "contract IMessenger"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 76,
              "nodeType": "StructuredDocumentation",
              "src": "1609:74:17",
              "text": "The L1 :sol:contract:`Resolver` contract to be used for L1 resolution."
            },
            "functionSelector": "935beb1a",
            "id": 78,
            "mutability": "mutable",
            "name": "l1Resolver",
            "nameLocation": "1703:10:17",
            "nodeType": "VariableDeclaration",
            "scope": 318,
            "src": "1688:25:17",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 77,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1688:7:17",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 79,
              "nodeType": "StructuredDocumentation",
              "src": "1720:33:17",
              "text": "Maps request IDs to fill IDs."
            },
            "functionSelector": "20158c44",
            "id": 83,
            "mutability": "mutable",
            "name": "fills",
            "nameLocation": "1793:5:17",
            "nodeType": "VariableDeclaration",
            "scope": 318,
            "src": "1758:40:17",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 82,
              "keyType": {
                "id": 80,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "1766:7:17",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "1758:27:17",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 81,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "1777:7:17",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 95,
              "nodeType": "Block",
              "src": "1907:51:17",
              "statements": [
                {
                  "expression": {
                    "id": 93,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 89,
                      "name": "messenger",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 75,
                      "src": "1917:9:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IMessenger_$3373",
                        "typeString": "contract IMessenger"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 91,
                          "name": "_messenger",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 86,
                          "src": "1940:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 90,
                        "name": "IMessenger",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3373,
                        "src": "1929:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IMessenger_$3373_$",
                          "typeString": "type(contract IMessenger)"
                        }
                      },
                      "id": 92,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1929:22:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IMessenger_$3373",
                        "typeString": "contract IMessenger"
                      }
                    },
                    "src": "1917:34:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IMessenger_$3373",
                      "typeString": "contract IMessenger"
                    }
                  },
                  "id": 94,
                  "nodeType": "ExpressionStatement",
                  "src": "1917:34:17"
                }
              ]
            },
            "documentation": {
              "id": 84,
              "nodeType": "StructuredDocumentation",
              "src": "1805:65:17",
              "text": "Constructor.\n @param _messenger The messenger."
            },
            "id": 96,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 87,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 86,
                  "mutability": "mutable",
                  "name": "_messenger",
                  "nameLocation": "1895:10:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 96,
                  "src": "1887:18:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 85,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1887:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1886:20:17"
            },
            "returnParameters": {
              "id": 88,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1907:0:17"
            },
            "scope": 318,
            "src": "1875:83:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 118,
              "nodeType": "Block",
              "src": "2217:108:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 110,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 105,
                          "name": "l1Resolver",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78,
                          "src": "2235:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 108,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2257:1:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 107,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2249:7:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 106,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2249:7:17",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 109,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2249:10:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2235:24:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265736f6c76657220616c726561647920736574",
                        "id": 111,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2261:22:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5d46d8f4f2917bfa810842fb8788f6e03c6217d9a792f3a7cc38a1f7b9eddaf3",
                          "typeString": "literal_string \"Resolver already set\""
                        },
                        "value": "Resolver already set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5d46d8f4f2917bfa810842fb8788f6e03c6217d9a792f3a7cc38a1f7b9eddaf3",
                          "typeString": "literal_string \"Resolver already set\""
                        }
                      ],
                      "id": 104,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2227:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2227:57:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 113,
                  "nodeType": "ExpressionStatement",
                  "src": "2227:57:17"
                },
                {
                  "expression": {
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 114,
                      "name": "l1Resolver",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78,
                      "src": "2294:10:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 115,
                      "name": "_l1Resolver",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 99,
                      "src": "2307:11:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2294:24:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 117,
                  "nodeType": "ExpressionStatement",
                  "src": "2294:24:17"
                }
              ]
            },
            "documentation": {
              "id": 97,
              "nodeType": "StructuredDocumentation",
              "src": "1964:189:17",
              "text": "Set the resolver's address\n Can only ever be set once. Before it is set, no fills or invalidations are possible\n @param _l1Resolver The L1 resolver address"
            },
            "functionSelector": "4e543b26",
            "id": 119,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 102,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 101,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2911,
                  "src": "2207:9:17"
                },
                "nodeType": "ModifierInvocation",
                "src": "2207:9:17"
              }
            ],
            "name": "setResolver",
            "nameLocation": "2167:11:17",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 100,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 99,
                  "mutability": "mutable",
                  "name": "_l1Resolver",
                  "nameLocation": "2187:11:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 119,
                  "src": "2179:19:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 98,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2179:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2178:21:17"
            },
            "returnParameters": {
              "id": 103,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2217:0:17"
            },
            "scope": 318,
            "src": "2158:167:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 234,
              "nodeType": "Block",
              "src": "3320:1053:17",
              "statements": [
                {
                  "assignments": [
                    138
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 138,
                      "mutability": "mutable",
                      "name": "_l1Resolver",
                      "nameLocation": "3338:11:17",
                      "nodeType": "VariableDeclaration",
                      "scope": 234,
                      "src": "3330:19:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 137,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3330:7:17",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 140,
                  "initialValue": {
                    "id": 139,
                    "name": "l1Resolver",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 78,
                    "src": "3352:10:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3330:32:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 147,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 142,
                          "name": "_l1Resolver",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 138,
                          "src": "3380:11:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 145,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3403:1:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 144,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3395:7:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 143,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3395:7:17",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 146,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3395:10:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3380:25:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265736f6c7665722061646472657373206e6f7420736574",
                        "id": 148,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3407:26:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_53618f21af364c2b61c8ddd72d086a9c267143d1b8d772550a171d844dc43660",
                          "typeString": "literal_string \"Resolver address not set\""
                        },
                        "value": "Resolver address not set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_53618f21af364c2b61c8ddd72d086a9c267143d1b8d772550a171d844dc43660",
                          "typeString": "literal_string \"Resolver address not set\""
                        }
                      ],
                      "id": 141,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3372:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 149,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3372:62:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 150,
                  "nodeType": "ExpressionStatement",
                  "src": "3372:62:17"
                },
                {
                  "assignments": [
                    152
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 152,
                      "mutability": "mutable",
                      "name": "requestId",
                      "nameLocation": "3452:9:17",
                      "nodeType": "VariableDeclaration",
                      "scope": 234,
                      "src": "3444:17:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 151,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3444:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 163,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 155,
                        "name": "sourceChainId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 122,
                        "src": "3505:13:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 156,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "3532:5:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 157,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "chainid",
                        "nodeType": "MemberAccess",
                        "src": "3532:13:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 158,
                        "name": "targetTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 124,
                        "src": "3559:18:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 159,
                        "name": "targetReceiverAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 126,
                        "src": "3591:21:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 160,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 128,
                        "src": "3626:6:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 161,
                        "name": "nonce",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 130,
                        "src": "3646:5:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint96",
                          "typeString": "uint96"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint96",
                          "typeString": "uint96"
                        }
                      ],
                      "expression": {
                        "id": 153,
                        "name": "BeamerUtils",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 32,
                        "src": "3464:11:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_BeamerUtils_$32_$",
                          "typeString": "type(library BeamerUtils)"
                        }
                      },
                      "id": 154,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "createRequestId",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 31,
                      "src": "3464:27:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint96_$returns$_t_bytes32_$",
                        "typeString": "function (uint256,uint256,address,address,uint256,uint96) pure returns (bytes32)"
                      }
                    },
                    "id": 162,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3464:197:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3444:217:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 172,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 165,
                            "name": "fills",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 83,
                            "src": "3680:5:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                              "typeString": "mapping(bytes32 => bytes32)"
                            }
                          },
                          "id": 167,
                          "indexExpression": {
                            "id": 166,
                            "name": "requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 152,
                            "src": "3686:9:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3680:16:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 170,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3708:1:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 169,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3700:7:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes32_$",
                              "typeString": "type(bytes32)"
                            },
                            "typeName": {
                              "id": 168,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "3700:7:17",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 171,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3700:10:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "3680:30:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "416c72656164792066696c6c6564",
                        "id": 173,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3712:16:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2f1fdd45b3b51c31df82ed6b4ad08141730b73e5c15da80ef36a62b2e6a9c27f",
                          "typeString": "literal_string \"Already filled\""
                        },
                        "value": "Already filled"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2f1fdd45b3b51c31df82ed6b4ad08141730b73e5c15da80ef36a62b2e6a9c27f",
                          "typeString": "literal_string \"Already filled\""
                        }
                      ],
                      "id": 164,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3672:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 174,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3672:57:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 175,
                  "nodeType": "ExpressionStatement",
                  "src": "3672:57:17"
                },
                {
                  "assignments": [
                    178
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 178,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "3747:5:17",
                      "nodeType": "VariableDeclaration",
                      "scope": 234,
                      "src": "3740:12:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$3070",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 177,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 176,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3070,
                          "src": "3740:6:17"
                        },
                        "referencedDeclaration": 3070,
                        "src": "3740:6:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$3070",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 182,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 180,
                        "name": "targetTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 124,
                        "src": "3762:18:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 179,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3070,
                      "src": "3755:6:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$3070_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 181,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3755:26:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$3070",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3740:41:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 186,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3814:3:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 187,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3814:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 188,
                        "name": "targetReceiverAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 126,
                        "src": "3826:21:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 189,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 128,
                        "src": "3849:6:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 183,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 178,
                        "src": "3791:5:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$3070",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 185,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3128,
                      "src": "3791:22:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$3070_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$3070_$",
                        "typeString": "function (contract IERC20,address,address,uint256)"
                      }
                    },
                    "id": 190,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3791:65:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 191,
                  "nodeType": "ExpressionStatement",
                  "src": "3791:65:17"
                },
                {
                  "assignments": [
                    193
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 193,
                      "mutability": "mutable",
                      "name": "fillId",
                      "nameLocation": "3875:6:17",
                      "nodeType": "VariableDeclaration",
                      "scope": 234,
                      "src": "3867:14:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 192,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3867:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 196,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 194,
                      "name": "generateFillId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 317,
                      "src": "3884:14:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
                        "typeString": "function () view returns (bytes32)"
                      }
                    },
                    "id": 195,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3884:16:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3867:33:17"
                },
                {
                  "expression": {
                    "id": 201,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 197,
                        "name": "fills",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 83,
                        "src": "3910:5:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                          "typeString": "mapping(bytes32 => bytes32)"
                        }
                      },
                      "id": 199,
                      "indexExpression": {
                        "id": 198,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 152,
                        "src": "3916:9:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3910:16:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 200,
                      "name": "fillId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 193,
                      "src": "3929:6:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "3910:25:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 202,
                  "nodeType": "ExpressionStatement",
                  "src": "3910:25:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 206,
                        "name": "_l1Resolver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 138,
                        "src": "3981:11:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 209,
                              "name": "Resolver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2269,
                              "src": "4038:8:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Resolver_$2269_$",
                                "typeString": "type(contract Resolver)"
                              }
                            },
                            "id": 210,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "resolve",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2246,
                            "src": "4038:16:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_declaration_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function Resolver.resolve(bytes32,bytes32,uint256,uint256,address)"
                            }
                          },
                          {
                            "components": [
                              {
                                "id": 211,
                                "name": "requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 152,
                                "src": "4073:9:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 212,
                                "name": "fillId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 193,
                                "src": "4084:6:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "expression": {
                                  "id": 213,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -4,
                                  "src": "4092:5:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 214,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "chainid",
                                "nodeType": "MemberAccess",
                                "src": "4092:13:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 215,
                                "name": "sourceChainId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 122,
                                "src": "4107:13:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "expression": {
                                  "id": 216,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "4122:3:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 217,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "4122:10:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "id": 218,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "4072:61:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$",
                              "typeString": "tuple(bytes32,bytes32,uint256,uint256,address)"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_function_declaration_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function Resolver.resolve(bytes32,bytes32,uint256,uint256,address)"
                            },
                            {
                              "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$",
                              "typeString": "tuple(bytes32,bytes32,uint256,uint256,address)"
                            }
                          ],
                          "expression": {
                            "id": 207,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4006:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 208,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeCall",
                          "nodeType": "MemberAccess",
                          "src": "4006:14:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 219,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4006:141:17",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 203,
                        "name": "messenger",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 75,
                        "src": "3946:9:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IMessenger_$3373",
                          "typeString": "contract IMessenger"
                        }
                      },
                      "id": 205,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sendMessage",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3362,
                      "src": "3946:21:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory) external"
                      }
                    },
                    "id": 220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3946:211:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 221,
                  "nodeType": "ExpressionStatement",
                  "src": "3946:211:17"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 223,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 152,
                        "src": "4200:9:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 224,
                        "name": "fillId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 193,
                        "src": "4223:6:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 225,
                        "name": "sourceChainId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 122,
                        "src": "4243:13:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 226,
                        "name": "targetTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 124,
                        "src": "4270:18:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 227,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4302:3:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 228,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4302:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 229,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 128,
                        "src": "4326:6:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 222,
                      "name": "RequestFilled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65,
                      "src": "4173:13:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (bytes32,bytes32,uint256,address,address,uint256)"
                      }
                    },
                    "id": 230,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4173:169:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 231,
                  "nodeType": "EmitStatement",
                  "src": "4168:174:17"
                },
                {
                  "expression": {
                    "id": 232,
                    "name": "fillId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 193,
                    "src": "4360:6:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 136,
                  "id": 233,
                  "nodeType": "Return",
                  "src": "4353:13:17"
                }
              ]
            },
            "documentation": {
              "id": 120,
              "nodeType": "StructuredDocumentation",
              "src": "2331:764:17",
              "text": "Fill the specified request.\n The caller must have approved at least ``amount`` tokens for :sol:contract:`FillManager`\n with the ERC20 token contract at ``targetTokenAddress``. The tokens will be immediately\n sent to ``targetReceiverAddress`` and a fill proof will be generated, which can later\n be used to trigger L1 resolution, if needed.\n @param sourceChainId The source chain ID.\n @param targetTokenAddress Address of the token contract on the target chain.\n @param targetReceiverAddress Recipient address on the target chain.\n @param amount Amount of tokens to transfer. Does not include fees.\n @param nonce The nonce used to create the request ID.\n @return The fill ID."
            },
            "functionSelector": "ac7f380a",
            "id": 235,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 133,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 132,
                  "name": "onlyWhitelist",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 352,
                  "src": "3288:13:17"
                },
                "nodeType": "ModifierInvocation",
                "src": "3288:13:17"
              }
            ],
            "name": "fillRequest",
            "nameLocation": "3109:11:17",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 122,
                  "mutability": "mutable",
                  "name": "sourceChainId",
                  "nameLocation": "3138:13:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3130:21:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 121,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3130:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 124,
                  "mutability": "mutable",
                  "name": "targetTokenAddress",
                  "nameLocation": "3169:18:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3161:26:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 123,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3161:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 126,
                  "mutability": "mutable",
                  "name": "targetReceiverAddress",
                  "nameLocation": "3205:21:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3197:29:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 125,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3197:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 128,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3244:6:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3236:14:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 127,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3236:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 130,
                  "mutability": "mutable",
                  "name": "nonce",
                  "nameLocation": "3267:5:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3260:12:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 129,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "3260:6:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3120:158:17"
            },
            "returnParameters": {
              "id": 136,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 135,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3311:7:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 134,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3311:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3310:9:17"
            },
            "scope": 318,
            "src": "3100:1273:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 302,
              "nodeType": "Block",
              "src": "5160:574:17",
              "statements": [
                {
                  "assignments": [
                    246
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 246,
                      "mutability": "mutable",
                      "name": "_l1Resolver",
                      "nameLocation": "5178:11:17",
                      "nodeType": "VariableDeclaration",
                      "scope": 302,
                      "src": "5170:19:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 245,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5170:7:17",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 248,
                  "initialValue": {
                    "id": 247,
                    "name": "l1Resolver",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 78,
                    "src": "5192:10:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5170:32:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 255,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 250,
                          "name": "_l1Resolver",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 246,
                          "src": "5220:11:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 253,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5243:1:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 252,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5235:7:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 251,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5235:7:17",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 254,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5235:10:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "5220:25:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265736f6c7665722061646472657373206e6f7420736574",
                        "id": 256,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5247:26:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_53618f21af364c2b61c8ddd72d086a9c267143d1b8d772550a171d844dc43660",
                          "typeString": "literal_string \"Resolver address not set\""
                        },
                        "value": "Resolver address not set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_53618f21af364c2b61c8ddd72d086a9c267143d1b8d772550a171d844dc43660",
                          "typeString": "literal_string \"Resolver address not set\""
                        }
                      ],
                      "id": 249,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5212:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 257,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5212:62:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 258,
                  "nodeType": "ExpressionStatement",
                  "src": "5212:62:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 264,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 260,
                            "name": "fills",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 83,
                            "src": "5292:5:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                              "typeString": "mapping(bytes32 => bytes32)"
                            }
                          },
                          "id": 262,
                          "indexExpression": {
                            "id": 261,
                            "name": "requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 238,
                            "src": "5298:9:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5292:16:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 263,
                          "name": "fillId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 240,
                          "src": "5312:6:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "5292:26:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "46696c6c2076616c6964",
                        "id": 265,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5320:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_aeb5c2f6f33f6690e97b51747ccc078819588a2f89ae3dfd014d9cf12171d85f",
                          "typeString": "literal_string \"Fill valid\""
                        },
                        "value": "Fill valid"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_aeb5c2f6f33f6690e97b51747ccc078819588a2f89ae3dfd014d9cf12171d85f",
                          "typeString": "literal_string \"Fill valid\""
                        }
                      ],
                      "id": 259,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5284:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 266,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5284:49:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 267,
                  "nodeType": "ExpressionStatement",
                  "src": "5284:49:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 272,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 269,
                          "name": "fillId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 240,
                          "src": "5364:6:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 270,
                            "name": "generateFillId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 317,
                            "src": "5374:14:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
                              "typeString": "function () view returns (bytes32)"
                            }
                          },
                          "id": 271,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5374:16:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "5364:26:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43616e6e6f7420696e76616c69646174652066696c6c73206f662063757272656e7420626c6f636b",
                        "id": 273,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5404:42:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_de0e260d42ab8bca4ade53f6464a84a76e7707fb7b9f5a37db70e9a051649ffc",
                          "typeString": "literal_string \"Cannot invalidate fills of current block\""
                        },
                        "value": "Cannot invalidate fills of current block"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_de0e260d42ab8bca4ade53f6464a84a76e7707fb7b9f5a37db70e9a051649ffc",
                          "typeString": "literal_string \"Cannot invalidate fills of current block\""
                        }
                      ],
                      "id": 268,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5343:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 274,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5343:113:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 275,
                  "nodeType": "ExpressionStatement",
                  "src": "5343:113:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 279,
                        "name": "_l1Resolver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 246,
                        "src": "5502:11:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 282,
                              "name": "Resolver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2269,
                              "src": "5559:8:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Resolver_$2269_$",
                                "typeString": "type(contract Resolver)"
                              }
                            },
                            "id": 283,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "resolve",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2246,
                            "src": "5559:16:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_declaration_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function Resolver.resolve(bytes32,bytes32,uint256,uint256,address)"
                            }
                          },
                          {
                            "components": [
                              {
                                "id": 284,
                                "name": "requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 238,
                                "src": "5594:9:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 285,
                                "name": "fillId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 240,
                                "src": "5605:6:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "expression": {
                                  "id": 286,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -4,
                                  "src": "5613:5:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 287,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "chainid",
                                "nodeType": "MemberAccess",
                                "src": "5613:13:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 288,
                                "name": "sourceChainId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 242,
                                "src": "5628:13:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 291,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5651:1:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 290,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5643:7:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 289,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5643:7:17",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 292,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5643:10:17",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "id": 293,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "5593:61:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$",
                              "typeString": "tuple(bytes32,bytes32,uint256,uint256,address)"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_function_declaration_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function Resolver.resolve(bytes32,bytes32,uint256,uint256,address)"
                            },
                            {
                              "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$",
                              "typeString": "tuple(bytes32,bytes32,uint256,uint256,address)"
                            }
                          ],
                          "expression": {
                            "id": 280,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "5527:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 281,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeCall",
                          "nodeType": "MemberAccess",
                          "src": "5527:14:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 294,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5527:141:17",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 276,
                        "name": "messenger",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 75,
                        "src": "5467:9:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IMessenger_$3373",
                          "typeString": "contract IMessenger"
                        }
                      },
                      "id": 278,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sendMessage",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3362,
                      "src": "5467:21:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory) external"
                      }
                    },
                    "id": 295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5467:211:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 296,
                  "nodeType": "ExpressionStatement",
                  "src": "5467:211:17"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 298,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 238,
                        "src": "5709:9:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 299,
                        "name": "fillId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 240,
                        "src": "5720:6:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 297,
                      "name": "FillInvalidated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72,
                      "src": "5693:15:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (bytes32,bytes32)"
                      }
                    },
                    "id": 300,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5693:34:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 301,
                  "nodeType": "EmitStatement",
                  "src": "5688:39:17"
                }
              ]
            },
            "documentation": {
              "id": 236,
              "nodeType": "StructuredDocumentation",
              "src": "4379:655:17",
              "text": "Invalidate the specified fill.\n In cases that a claim has been made on the source chain, but without a corresponding fill\n actually happening on the target chain, anyone can call this function to mark the fill\n as invalid. This is typically followed by a challenge game on the source chain, which\n the dishonest claimer is guaranteed to lose as soon as the information about the invalid\n fill (so called \"non-fill proof\") is propagated to the source chain via L1 resolution.\n @param requestId The request ID.\n @param fillId The fill ID.\n @param sourceChainId The source chain ID."
            },
            "functionSelector": "03fc4c37",
            "id": 303,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "invalidateFill",
            "nameLocation": "5048:14:17",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 243,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 238,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "5080:9:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 303,
                  "src": "5072:17:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 237,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5072:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 240,
                  "mutability": "mutable",
                  "name": "fillId",
                  "nameLocation": "5107:6:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 303,
                  "src": "5099:14:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 239,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5099:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 242,
                  "mutability": "mutable",
                  "name": "sourceChainId",
                  "nameLocation": "5131:13:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 303,
                  "src": "5123:21:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 241,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5123:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5062:88:17"
            },
            "returnParameters": {
              "id": 244,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5160:0:17"
            },
            "scope": 318,
            "src": "5039:695:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 316,
              "nodeType": "Block",
              "src": "5936:51:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 313,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 310,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "5963:5:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 311,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "number",
                          "nodeType": "MemberAccess",
                          "src": "5963:12:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "hexValue": "31",
                          "id": 312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5978:1:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "src": "5963:16:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 309,
                      "name": "blockhash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -5,
                      "src": "5953:9:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_blockhash_view$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (uint256) view returns (bytes32)"
                      }
                    },
                    "id": 314,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5953:27:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 308,
                  "id": 315,
                  "nodeType": "Return",
                  "src": "5946:34:17"
                }
              ]
            },
            "documentation": {
              "id": 304,
              "nodeType": "StructuredDocumentation",
              "src": "5740:134:17",
              "text": "Generate a fill ID.\n The fill ID is defined as the previous block hash.\n @return The current fill ID"
            },
            "id": 317,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "generateFillId",
            "nameLocation": "5888:14:17",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 305,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5902:2:17"
            },
            "returnParameters": {
              "id": 308,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 307,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 317,
                  "src": "5927:7:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 306,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5927:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5926:9:17"
            },
            "scope": 318,
            "src": "5879:108:17",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "private"
          }
        ],
        "scope": 319,
        "src": "782:5207:17",
        "usedErrors": []
      }
    ],
    "src": "32:5958:17"
  },
  "bytecode": "60a060405234801561001057600080fd5b50604051610f2e380380610f2e83398101604081905261002f91610099565b61003833610049565b6001600160a01b03166080526100c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ab57600080fd5b81516001600160a01b03811681146100c257600080fd5b9392505050565b608051610e3c6100f26000396000818161012c0152818161033801526107240152610e3c6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a6146101795780638da5cb5b14610181578063935beb1a146101925780639e375226146101a5578063ac7f380a146101d8578063f2fde38b146101eb57600080fd5b806303fc4c37146100b957806320158c44146100ce57806331e08f7a146101015780633993b6ed146101145780633cb747bf146101275780634e543b2614610166575b600080fd5b6100cc6100c7366004610c25565b6101fe565b005b6100ee6100dc366004610c51565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6100cc61010f366004610c86565b610413565b6100cc610122366004610c86565b610477565b61014e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100f8565b6100cc610174366004610c86565b6104d0565b6100cc61054a565b6000546001600160a01b031661014e565b60025461014e906001600160a01b031681565b6101c86101b3366004610c86565b60016020526000908152604090205460ff1681565b60405190151581526020016100f8565b6100ee6101e6366004610ca8565b61055e565b6100cc6101f9366004610c86565b610828565b6002546001600160a01b0316806102575760405162461bcd60e51b815260206004820152601860248201527714995cdbdb1d995c881859191c995cdcc81b9bdd081cd95d60421b60448201526064015b60405180910390fd5b6000848152600360205260409020548390036102a25760405162461bcd60e51b815260206004820152600a602482015269119a5b1b081d985b1a5960b21b604482015260640161024e565b6102aa6108a1565b83036103095760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f7420696e76616c69646174652066696c6c73206f662063757272656044820152676e7420626c6f636b60c01b606482015260840161024e565b604051602481018590526044810184905246606482015260848101839052600060a48201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bb5ddb0f90839060c40160408051601f198184030181529181526020820180516001600160e01b03166314adc78760e31b179052516001600160e01b031960e085901b1681526103ae929190600401610d6c565b600060405180830381600087803b1580156103c857600080fd5b505af11580156103dc573d6000803e3d6000fd5b50506040518592508691507f931b401cf9baede43dc97f7d9dd4017d44f22bfa0a69668d527d9b5fff42b90a90600090a350505050565b61041b6108b4565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f371fc559c30f70424413fed6bf7e57dc939651331abad5c970a8ea0921c80b2e91015b60405180910390a150565b61047f6108b4565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527f4e774c97f73f4bea034579e4224498d7d9b3a4109eaa70ed3d85c97a5855f198910161046c565b6104d86108b4565b6002546001600160a01b0316156105285760405162461bcd60e51b815260206004820152601460248201527314995cdbdb1d995c88185b1c9958591e481cd95d60621b604482015260640161024e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6105526108b4565b61055c600061090e565b565b3360009081526001602052604081205460ff166105b65760405162461bcd60e51b815260206004820152601660248201527514d95b99195c881b9bdd081dda1a5d195b1a5cdd195960521b604482015260640161024e565b6002546001600160a01b03168061060a5760405162461bcd60e51b815260206004820152601860248201527714995cdbdb1d995c881859191c995cdcc81b9bdd081cd95d60421b604482015260640161024e565b6040805160208082018a905246828401526bffffffffffffffffffffffff1960608a811b82168185015289901b166074830152608882018790526001600160a01b031960a087901b1660a88301528251808303609401815260b49092019092528051910120600090600081815260036020526040902054909150156106c25760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e48199a5b1b195960921b604482015260640161024e565b866106d86001600160a01b03821633898961095e565b60006106e26108a1565b60008481526003602052604090819020829055516024810185905260448101829052466064820152608481018c90523360a48201529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bb5ddb0f90869060c40160408051601f198184030181529181526020820180516001600160e01b03166314adc78760e31b179052516001600160e01b031960e085901b16815261079a929190600401610d6c565b600060405180830381600087803b1580156107b457600080fd5b505af11580156107c8573d6000803e3d6000fd5b5050604080518481523360208201529081018a90526001600160a01b038c1692508c915085907f2995401b199bc45ea8c8b79c27fb204b270cfb74444d546b1a100935e34438879060600160405180910390a49998505050505050505050565b6108306108b4565b6001600160a01b0381166108955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161024e565b61089e8161090e565b50565b60006108ae600143610d90565b40905090565b6000546001600160a01b0316331461055c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526109b89085906109be565b50505050565b6000610a13826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a959092919063ffffffff16565b805190915015610a905780806020019051810190610a319190610db5565b610a905760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161024e565b505050565b6060610aa48484600085610aac565b949350505050565b606082471015610b0d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161024e565b600080866001600160a01b03168587604051610b299190610dd7565b60006040518083038185875af1925050503d8060008114610b66576040519150601f19603f3d011682016040523d82523d6000602084013e610b6b565b606091505b5091509150610b7c87838387610b87565b979650505050505050565b60608315610bf6578251600003610bef576001600160a01b0385163b610bef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161024e565b5081610aa4565b610aa48383815115610c0b5781518083602001fd5b8060405162461bcd60e51b815260040161024e9190610df3565b600080600060608486031215610c3a57600080fd5b505081359360208301359350604090920135919050565b600060208284031215610c6357600080fd5b5035919050565b80356001600160a01b0381168114610c8157600080fd5b919050565b600060208284031215610c9857600080fd5b610ca182610c6a565b9392505050565b600080600080600060a08688031215610cc057600080fd5b85359450610cd060208701610c6a565b9350610cde60408701610c6a565b92506060860135915060808601356bffffffffffffffffffffffff81168114610d0657600080fd5b809150509295509295909350565b60005b83811015610d2f578181015183820152602001610d17565b838111156109b85750506000910152565b60008151808452610d58816020860160208601610d14565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610aa490830184610d40565b600082821015610db057634e487b7160e01b600052601160045260246000fd5b500390565b600060208284031215610dc757600080fd5b81518015158114610ca157600080fd5b60008251610de9818460208701610d14565b9190910192915050565b602081526000610ca16020830184610d4056fea2646970667358221220e4951d06fd029c7b126c13c8086280651e30cc57802c727c5353f2cb3950c2ab64736f6c634300080d0033",
  "bytecodeSha1": "01733fa57b2f91dc93d83a5cfed3c11461e257f4",
  "compiler": {
    "evm_version": "london",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "FillManager",
  "coverageMap": {
    "branches": {
      "0": {
        "Ownable._checkOwner": {
          "48": [
            1422,
            1445,
            true
          ]
        },
        "Ownable.transferOwnership": {
          "47": [
            2169,
            2191,
            true
          ]
        }
      },
      "16": {},
      "17": {
        "FillManager.fillRequest": {
          "41": [
            3680,
            3710,
            true
          ]
        },
        "FillManager.invalidateFill": {
          "38": [
            5292,
            5318,
            true
          ],
          "39": [
            5364,
            5390,
            true
          ]
        },
        "FillManager.setResolver": {
          "40": [
            2235,
            2259,
            true
          ]
        }
      },
      "18": {
        "FillManager.fillRequest": {
          "46": [
            972,
            994,
            true
          ]
        }
      },
      "28": {},
      "3": {},
      "5": {},
      "6": {
        "SafeERC20._callOptionalReturn": {
          "49": [
            4275,
            4296,
            false
          ],
          "50": [
            4359,
            4389,
            true
          ]
        }
      },
      "7": {
        "Address._revert": {
          "45": [
            8775,
            8796,
            false
          ]
        },
        "Address.functionCallWithValue": {
          "42": [
            5157,
            5187,
            true
          ]
        },
        "Address.verifyCallResultFromTarget": {
          "43": [
            7674,
            7681,
            false
          ],
          "44": [
            7701,
            7723,
            false
          ]
        }
      },
      "8": {}
    },
    "statements": {
      "0": {
        "Ownable._checkOwner": {
          "25": [
            1414,
            1482
          ]
        },
        "Ownable._transferOwnership": {
          "26": [
            2541,
            2558
          ],
          "27": [
            2568,
            2613
          ]
        },
        "Ownable.owner": {
          "0": [
            1266,
            1279
          ]
        },
        "Ownable.renounceOwnership": {
          "12": [
            1895,
            1925
          ]
        },
        "Ownable.transferOwnership": {
          "21": [
            2161,
            2234
          ],
          "22": [
            2244,
            2272
          ]
        }
      },
      "16": {
        "BeamerUtils.createRequestId": {
          "14": [
            340,
            642
          ]
        }
      },
      "17": {
        "FillManager.fillRequest": {
          "13": [
            3372,
            3434
          ],
          "15": [
            3672,
            3729
          ],
          "16": [
            3791,
            3856
          ],
          "17": [
            3910,
            3935
          ],
          "18": [
            3946,
            4157
          ],
          "19": [
            4168,
            4342
          ],
          "20": [
            4353,
            4366
          ]
        },
        "FillManager.generateFillId": {
          "23": [
            5946,
            5980
          ]
        },
        "FillManager.invalidateFill": {
          "1": [
            5212,
            5274
          ],
          "2": [
            5284,
            5333
          ],
          "3": [
            5343,
            5456
          ],
          "4": [
            5467,
            5678
          ],
          "5": [
            5688,
            5727
          ]
        },
        "FillManager.setResolver": {
          "10": [
            2227,
            2284
          ],
          "11": [
            2294,
            2318
          ]
        }
      },
      "18": {
        "LpWhitelist.addAllowedLp": {
          "6": [
            1320,
            1344
          ],
          "7": [
            1355,
            1374
          ]
        },
        "LpWhitelist.removeAllowedLp": {
          "8": [
            1670,
            1694
          ],
          "9": [
            1705,
            1726
          ]
        }
      },
      "28": {},
      "3": {},
      "5": {},
      "6": {
        "SafeERC20._callOptionalReturn": {
          "29": [
            4351,
            4436
          ]
        },
        "SafeERC20.safeTransferFrom": {
          "28": [
            1112,
            1208
          ]
        }
      },
      "7": {
        "Address._revert": {
          "37": [
            9119,
            9139
          ]
        },
        "Address.functionCall": {
          "30": [
            4030,
            4089
          ]
        },
        "Address.functionCallWithValue": {
          "31": [
            5149,
            5230
          ],
          "32": [
            5323,
            5399
          ]
        },
        "Address.isContract": {
          "33": [
            1458,
            1488
          ]
        },
        "Address.verifyCallResultFromTarget": {
          "34": [
            7908,
            7968
          ],
          "35": [
            7996,
            8013
          ],
          "36": [
            8044,
            8077
          ]
        }
      },
      "8": {
        "Context._msgSender": {
          "24": [
            712,
            729
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.8.0/Address",
    "BeamerUtils",
    "OpenZeppelin/openzeppelin-contracts@4.8.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.8.0/IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.8.0/IERC20Permit",
    "IMessenger",
    "LpWhitelist",
    "OpenZeppelin/openzeppelin-contracts@4.8.0/Ownable",
    "OpenZeppelin/openzeppelin-contracts@4.8.0/SafeERC20"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a6146101795780638da5cb5b14610181578063935beb1a146101925780639e375226146101a5578063ac7f380a146101d8578063f2fde38b146101eb57600080fd5b806303fc4c37146100b957806320158c44146100ce57806331e08f7a146101015780633993b6ed146101145780633cb747bf146101275780634e543b2614610166575b600080fd5b6100cc6100c7366004610c25565b6101fe565b005b6100ee6100dc366004610c51565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6100cc61010f366004610c86565b610413565b6100cc610122366004610c86565b610477565b61014e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100f8565b6100cc610174366004610c86565b6104d0565b6100cc61054a565b6000546001600160a01b031661014e565b60025461014e906001600160a01b031681565b6101c86101b3366004610c86565b60016020526000908152604090205460ff1681565b60405190151581526020016100f8565b6100ee6101e6366004610ca8565b61055e565b6100cc6101f9366004610c86565b610828565b6002546001600160a01b0316806102575760405162461bcd60e51b815260206004820152601860248201527714995cdbdb1d995c881859191c995cdcc81b9bdd081cd95d60421b60448201526064015b60405180910390fd5b6000848152600360205260409020548390036102a25760405162461bcd60e51b815260206004820152600a602482015269119a5b1b081d985b1a5960b21b604482015260640161024e565b6102aa6108a1565b83036103095760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f7420696e76616c69646174652066696c6c73206f662063757272656044820152676e7420626c6f636b60c01b606482015260840161024e565b604051602481018590526044810184905246606482015260848101839052600060a48201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bb5ddb0f90839060c40160408051601f198184030181529181526020820180516001600160e01b03166314adc78760e31b179052516001600160e01b031960e085901b1681526103ae929190600401610d6c565b600060405180830381600087803b1580156103c857600080fd5b505af11580156103dc573d6000803e3d6000fd5b50506040518592508691507f931b401cf9baede43dc97f7d9dd4017d44f22bfa0a69668d527d9b5fff42b90a90600090a350505050565b61041b6108b4565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f371fc559c30f70424413fed6bf7e57dc939651331abad5c970a8ea0921c80b2e91015b60405180910390a150565b61047f6108b4565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527f4e774c97f73f4bea034579e4224498d7d9b3a4109eaa70ed3d85c97a5855f198910161046c565b6104d86108b4565b6002546001600160a01b0316156105285760405162461bcd60e51b815260206004820152601460248201527314995cdbdb1d995c88185b1c9958591e481cd95d60621b604482015260640161024e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6105526108b4565b61055c600061090e565b565b3360009081526001602052604081205460ff166105b65760405162461bcd60e51b815260206004820152601660248201527514d95b99195c881b9bdd081dda1a5d195b1a5cdd195960521b604482015260640161024e565b6002546001600160a01b03168061060a5760405162461bcd60e51b815260206004820152601860248201527714995cdbdb1d995c881859191c995cdcc81b9bdd081cd95d60421b604482015260640161024e565b6040805160208082018a905246828401526bffffffffffffffffffffffff1960608a811b82168185015289901b166074830152608882018790526001600160a01b031960a087901b1660a88301528251808303609401815260b49092019092528051910120600090600081815260036020526040902054909150156106c25760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e48199a5b1b195960921b604482015260640161024e565b866106d86001600160a01b03821633898961095e565b60006106e26108a1565b60008481526003602052604090819020829055516024810185905260448101829052466064820152608481018c90523360a48201529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bb5ddb0f90869060c40160408051601f198184030181529181526020820180516001600160e01b03166314adc78760e31b179052516001600160e01b031960e085901b16815261079a929190600401610d6c565b600060405180830381600087803b1580156107b457600080fd5b505af11580156107c8573d6000803e3d6000fd5b5050604080518481523360208201529081018a90526001600160a01b038c1692508c915085907f2995401b199bc45ea8c8b79c27fb204b270cfb74444d546b1a100935e34438879060600160405180910390a49998505050505050505050565b6108306108b4565b6001600160a01b0381166108955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161024e565b61089e8161090e565b50565b60006108ae600143610d90565b40905090565b6000546001600160a01b0316331461055c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526109b89085906109be565b50505050565b6000610a13826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a959092919063ffffffff16565b805190915015610a905780806020019051810190610a319190610db5565b610a905760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161024e565b505050565b6060610aa48484600085610aac565b949350505050565b606082471015610b0d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161024e565b600080866001600160a01b03168587604051610b299190610dd7565b60006040518083038185875af1925050503d8060008114610b66576040519150601f19603f3d011682016040523d82523d6000602084013e610b6b565b606091505b5091509150610b7c87838387610b87565b979650505050505050565b60608315610bf6578251600003610bef576001600160a01b0385163b610bef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161024e565b5081610aa4565b610aa48383815115610c0b5781518083602001fd5b8060405162461bcd60e51b815260040161024e9190610df3565b600080600060608486031215610c3a57600080fd5b505081359360208301359350604090920135919050565b600060208284031215610c6357600080fd5b5035919050565b80356001600160a01b0381168114610c8157600080fd5b919050565b600060208284031215610c9857600080fd5b610ca182610c6a565b9392505050565b600080600080600060a08688031215610cc057600080fd5b85359450610cd060208701610c6a565b9350610cde60408701610c6a565b92506060860135915060808601356bffffffffffffffffffffffff81168114610d0657600080fd5b809150509295509295909350565b60005b83811015610d2f578181015183820152602001610d17565b838111156109b85750506000910152565b60008151808452610d58816020860160208601610d14565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610aa490830184610d40565b600082821015610db057634e487b7160e01b600052601160045260246000fd5b500390565b600060208284031215610dc757600080fd5b81518015158114610ca157600080fd5b60008251610de9818460208701610d14565b9190910192915050565b602081526000610ca16020830184610d4056fea2646970667358221220e4951d06fd029c7b126c13c8086280651e30cc57802c727c5353f2cb3950c2ab64736f6c634300080d0033",
  "deployedSourceMap": "782:5207:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5039:695;;;;;;:::i;:::-;;:::i;:::-;;1758:40;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;666:25:29;;;654:2;639:18;1758:40:17;;;;;;;;1256:125:18;;;;;;:::i;:::-;;:::i;1603:130::-;;;;;;:::i;:::-;;:::i;1565:37:17:-;;;;;;;;-1:-1:-1;;;;;1254:32:29;;;1236:51;;1224:2;1209:18;1565:37:17;1071:222:29;2158:167:17;;;;;;:::i;:::-;;:::i;1831:101:0:-;;;:::i;1201:85::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;1688:25:17;;;;;-1:-1:-1;;;;;1688:25:17;;;820:42:18;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1671:14:29;;1664:22;1646:41;;1634:2;1619:18;820:42:18;1506:187:29;3100:1273:17;;;;;;:::i;:::-;;:::i;2081:198:0:-;;;;;;:::i;:::-;;:::i;5039:695:17:-;5192:10;;-1:-1:-1;;;;;5192:10:17;;5212:62;;;;-1:-1:-1;;;5212:62:17;;2483:2:29;5212:62:17;;;2465:21:29;2522:2;2502:18;;;2495:30;-1:-1:-1;;;2541:18:29;;;2534:54;2605:18;;5212:62:17;;;;;;;;;5292:16;;;;:5;:16;;;;;;:26;;;5284:49;;;;-1:-1:-1;;;5284:49:17;;2836:2:29;5284:49:17;;;2818:21:29;2875:2;2855:18;;;2848:30;-1:-1:-1;;;2894:18:29;;;2887:40;2944:18;;5284:49:17;2634:334:29;5284:49:17;5374:16;:14;:16::i;:::-;5364:6;:26;5343:113;;;;-1:-1:-1;;;5343:113:17;;3175:2:29;5343:113:17;;;3157:21:29;3214:2;3194:18;;;3187:30;3253:34;3233:18;;;3226:62;-1:-1:-1;;;3304:18:29;;;3297:38;3352:19;;5343:113:17;2973:404:29;5343:113:17;5527:141;;;;;3641:25:29;;;3682:18;;;3675:34;;;5613:13:17;3725:18:29;;;3718:34;3768:18;;;3761:34;;;5651:1:17;3811:19:29;;;3804:61;-1:-1:-1;;;;;5467:9:17;:21;;;;5502:11;;3613:19:29;;5527:141:17;;;-1:-1:-1;;5527:141:17;;;;;;;;;;;;;;-1:-1:-1;;;;;5527:141:17;-1:-1:-1;;;5527:141:17;;;5467:211;-1:-1:-1;;;;;;5527:141:17;5467:211;;;;;;;;;5527:141;5467:211;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5693:34:17;;5720:6;;-1:-1:-1;5709:9:17;;-1:-1:-1;5693:34:17;;;;;5160:574;5039:695;;;:::o;1256:125:18:-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;1320:17:18;::::1;;::::0;;;1340:4:::1;1320:17;::::0;;;;;;;;:24;;-1:-1:-1;;1320:24:18::1;::::0;;::::1;::::0;;;1360:14;;1236:51:29;;;1360:14:18::1;::::0;1209:18:29;1360:14:18::1;;;;;;;;1256:125:::0;:::o;1603:130::-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;1677:17:18;::::1;;::::0;;;:10:::1;:17;::::0;;;;;;;;1670:24;;-1:-1:-1;;1670:24:18::1;::::0;;1710:16;;1236:51:29;;;1710:16:18::1;::::0;1209:18:29;1710:16:18::1;1071:222:29::0;2158:167:17;1094:13:0;:11;:13::i;:::-;2235:10:17::1;::::0;-1:-1:-1;;;;;2235:10:17::1;:24:::0;2227:57:::1;;;::::0;-1:-1:-1;;;2227:57:17;;4922:2:29;2227:57:17::1;::::0;::::1;4904:21:29::0;4961:2;4941:18;;;4934:30;-1:-1:-1;;;4980:18:29;;;4973:50;5040:18;;2227:57:17::1;4720:344:29::0;2227:57:17::1;2294:10;:24:::0;;-1:-1:-1;;;;;;2294:24:17::1;-1:-1:-1::0;;;;;2294:24:17;;;::::1;::::0;;;::::1;::::0;;2158:167::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;3100:1273:17:-;983:10:18;3311:7:17;972:22:18;;;:10;:22;;;;;;;;964:57;;;;-1:-1:-1;;;964:57:18;;5271:2:29;964:57:18;;;5253:21:29;5310:2;5290:18;;;5283:30;-1:-1:-1;;;5329:18:29;;;5322:52;5391:18;;964:57:18;5069:346:29;964:57:18;3352:10:17::1;::::0;-1:-1:-1;;;;;3352:10:17::1;::::0;3372:62:::1;;;::::0;-1:-1:-1;;;3372:62:17;;2483:2:29;3372:62:17::1;::::0;::::1;2465:21:29::0;2522:2;2502:18;;;2495:30;-1:-1:-1;;;2541:18:29;;;2534:54;2605:18;;3372:62:17::1;2281:348:29::0;3372:62:17::1;386:242:16::0;;;;;;;7375:19:29;;;3532:13:17::1;7410:12:29::0;;;7403:28;-1:-1:-1;;7519:2:29;7515:15;;;7511:24;;7497:12;;;7490:46;7570:15;;;7566:24;7552:12;;;7545:46;7607:13;;;7600:29;;;-1:-1:-1;;;;;;7686:3:29;7664:16;;;7660:59;7645:13;;;7638:82;386:242:16;;;;;;;;;7736:13:29;;;;386:242:16;;;359:283;;;;;3444:17:17::1;::::0;3708:1:::1;3680:16:::0;;;:5:::1;:16;::::0;;;;;3444:217;;-1:-1:-1;3680:30:17;3672:57:::1;;;::::0;-1:-1:-1;;;3672:57:17;;5622:2:29;3672:57:17::1;::::0;::::1;5604:21:29::0;5661:2;5641:18;;;5634:30;-1:-1:-1;;;5680:18:29;;;5673:44;5734:18;;3672:57:17::1;5420:338:29::0;3672:57:17::1;3762:18:::0;3791:65:::1;-1:-1:-1::0;;;;;3791:22:17;::::1;3814:10;3826:21:::0;3849:6;3791:22:::1;:65::i;:::-;3867:14;3884:16;:14;:16::i;:::-;3910;::::0;;;:5:::1;:16;::::0;;;;;;:25;;;4006:141;::::1;::::0;::::1;3641:25:29::0;;;3682:18;;;3675:34;;;4092:13:17::1;3725:18:29::0;;;3718:34;3768:18;;;3761:34;;;4122:10:17::1;3811:19:29::0;;;3804:61;3867:33:17;;-1:-1:-1;;;;;;3946:9:17::1;:21;::::0;::::1;::::0;3981:11;;3613:19:29;;4006:141:17::1;::::0;;-1:-1:-1;;4006:141:17;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;4006:141:17::1;-1:-1:-1::0;;;4006:141:17::1;::::0;;3946:211;-1:-1:-1;;;;;;4006:141:17::1;3946:211:::0;;;;;;::::1;::::0;;4006:141;3946:211:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;4173:169:17::1;::::0;;5965:25:29;;;4302:10:17::1;6021:2:29::0;6006:18;;5999:60;6075:18;;;6068:34;;;-1:-1:-1;;;;;4173:169:17;::::1;::::0;-1:-1:-1;4243:13:17;;-1:-1:-1;4200:9:17;;4173:169:::1;::::0;5953:2:29;5938:18;4173:169:17::1;;;;;;;4360:6:::0;3100:1273;-1:-1:-1;;;;;;;;;3100:1273:17:o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;6315:2:29;2161:73:0::1;::::0;::::1;6297:21:29::0;6354:2;6334:18;;;6327:30;6393:34;6373:18;;;6366:62;-1:-1:-1;;;6444:18:29;;;6437:36;6490:19;;2161:73:0::1;6113:402:29::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;5879:108:17:-;5927:7;5963:16;5978:1;5963:12;:16;:::i;:::-;5953:27;5946:34;;5879:108;:::o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;6949:2:29;1414:68:0;;;6931:21:29;;;6968:18;;;6961:30;7027:34;7007:18;;;7000:62;7079:18;;1414:68:0;6747:356:29;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;974:241:6:-;1139:68;;;-1:-1:-1;;;;;8018:15:29;;;1139:68:6;;;8000:34:29;8070:15;;8050:18;;;8043:43;8102:18;;;;8095:34;;;1139:68:6;;;;;;;;;;7935:18:29;;;;1139:68:6;;;;;;;;-1:-1:-1;;;;;1139:68:6;-1:-1:-1;;;1139:68:6;;;1112:96;;1132:5;;1112:19;:96::i;:::-;974:241;;;;:::o;3747:706::-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:6;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:6;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:6;;8624:2:29;4351:85:6;;;8606:21:29;8663:2;8643:18;;;8636:30;8702:34;8682:18;;;8675:62;-1:-1:-1;;;8753:18:29;;;8746:40;8803:19;;4351:85:6;8422:406:29;4351:85:6;3817:636;3747:706;;:::o;3873:223:7:-;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:7:o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:7;;9035:2:29;5149:81:7;;;9017:21:29;9074:2;9054:18;;;9047:30;9113:34;9093:18;;;9086:62;-1:-1:-1;;;9164:18:29;;;9157:36;9210:19;;5149:81:7;8833:402:29;5149:81:7;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:7;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:7:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1465:19:7;;;7908:60;;;;-1:-1:-1;;;7908:60:7;;9721:2:29;7908:60:7;;;9703:21:29;9760:2;9740:18;;;9733:30;9799:31;9779:18;;;9772:59;9848:18;;7908:60:7;9519:353:29;7908:60:7;-1:-1:-1;8003:10:7;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:7;;;;;;;;:::i;14:316:29:-;91:6;99;107;160:2;148:9;139:7;135:23;131:32;128:52;;;176:1;173;166:12;128:52;-1:-1:-1;;199:23:29;;;269:2;254:18;;241:32;;-1:-1:-1;320:2:29;305:18;;;292:32;;14:316;-1:-1:-1;14:316:29:o;335:180::-;394:6;447:2;435:9;426:7;422:23;418:32;415:52;;;463:1;460;453:12;415:52;-1:-1:-1;486:23:29;;335:180;-1:-1:-1;335:180:29:o;702:173::-;770:20;;-1:-1:-1;;;;;819:31:29;;809:42;;799:70;;865:1;862;855:12;799:70;702:173;;;:::o;880:186::-;939:6;992:2;980:9;971:7;967:23;963:32;960:52;;;1008:1;1005;998:12;960:52;1031:29;1050:9;1031:29;:::i;:::-;1021:39;880:186;-1:-1:-1;;;880:186:29:o;1698:578::-;1792:6;1800;1808;1816;1824;1877:3;1865:9;1856:7;1852:23;1848:33;1845:53;;;1894:1;1891;1884:12;1845:53;1930:9;1917:23;1907:33;;1959:38;1993:2;1982:9;1978:18;1959:38;:::i;:::-;1949:48;;2016:38;2050:2;2039:9;2035:18;2016:38;:::i;:::-;2006:48;;2101:2;2090:9;2086:18;2073:32;2063:42;;2155:3;2144:9;2140:19;2127:33;2200:26;2193:5;2189:38;2182:5;2179:49;2169:77;;2242:1;2239;2232:12;2169:77;2265:5;2255:15;;;1698:578;;;;;;;;:::o;3876:258::-;3948:1;3958:113;3972:6;3969:1;3966:13;3958:113;;;4048:11;;;4042:18;4029:11;;;4022:39;3994:2;3987:10;3958:113;;;4089:6;4086:1;4083:13;4080:48;;;-1:-1:-1;;4124:1:29;4106:16;;4099:27;3876:258::o;4139:257::-;4180:3;4218:5;4212:12;4245:6;4240:3;4233:19;4261:63;4317:6;4310:4;4305:3;4301:14;4294:4;4287:5;4283:16;4261:63;:::i;:::-;4378:2;4357:15;-1:-1:-1;;4353:29:29;4344:39;;;;4385:4;4340:50;;4139:257;-1:-1:-1;;4139:257:29:o;4401:314::-;-1:-1:-1;;;;;4576:32:29;;4558:51;;4645:2;4640;4625:18;;4618:30;;;-1:-1:-1;;4665:44:29;;4690:18;;4682:6;4665:44;:::i;6520:222::-;6560:4;6588:1;6585;6582:8;6579:131;;;6632:10;6627:3;6623:20;6620:1;6613:31;6667:4;6664:1;6657:15;6695:4;6692:1;6685:15;6579:131;-1:-1:-1;6727:9:29;;6520:222::o;8140:277::-;8207:6;8260:2;8248:9;8239:7;8235:23;8231:32;8228:52;;;8276:1;8273;8266:12;8228:52;8308:9;8302:16;8361:5;8354:13;8347:21;8340:5;8337:32;8327:60;;8383:1;8380;8373:12;9240:274;9369:3;9407:6;9401:13;9423:53;9469:6;9464:3;9457:4;9449:6;9445:17;9423:53;:::i;:::-;9492:16;;;;;9240:274;-1:-1:-1;;9240:274:29:o;9877:219::-;10026:2;10015:9;10008:21;9989:4;10046:44;10086:2;10075:9;10071:18;10063:6;10046:44;:::i",
  "language": "Solidity",
  "natspec": {
    "events": {
      "FillInvalidated(bytes32,bytes32)": {
        "notice": "Emitted when a fill has been invalidated. .. seealso:: :sol:func:`invalidateFill`"
      },
      "LpAdded(address)": {
        "notice": "Emitted when a liquidity provider has been added to the set of allowed liquidity providers. .. seealso:: :sol:func:`addAllowedLp`"
      },
      "LpRemoved(address)": {
        "notice": "Emitted when a liquidity provider has been removed from the set of allowed liquidity providers. .. seealso:: :sol:func:`removeAllowedLp`"
      },
      "RequestFilled(bytes32,bytes32,uint256,address,address,uint256)": {
        "notice": "Emitted when a request has been filled. .. seealso:: :sol:func:`fillRequest`"
      }
    },
    "kind": "dev",
    "methods": {
      "addAllowedLp(address)": {
        "notice": "Add a liquidity provider to the set of allowed liquidity providers. .. note:: This function can only be called by the contract owner.",
        "params": {
          "newLp": "The liquidity provider."
        }
      },
      "allowedLps(address)": {
        "notice": "The set of liquidity providers that are added to the whitelist."
      },
      "constructor": {
        "notice": "Constructor.",
        "params": {
          "_messenger": "The messenger."
        }
      },
      "fillRequest(uint256,address,address,uint256,uint96)": {
        "notice": "Fill the specified request. The caller must have approved at least ``amount`` tokens for :sol:contract:`FillManager` with the ERC20 token contract at ``targetTokenAddress``. The tokens will be immediately sent to ``targetReceiverAddress`` and a fill proof will be generated, which can later be used to trigger L1 resolution, if needed.",
        "params": {
          "amount": "Amount of tokens to transfer. Does not include fees.",
          "nonce": "The nonce used to create the request ID.",
          "sourceChainId": "The source chain ID.",
          "targetReceiverAddress": "Recipient address on the target chain.",
          "targetTokenAddress": "Address of the token contract on the target chain."
        },
        "returns": {
          "_0": "The fill ID."
        }
      },
      "fills(bytes32)": {
        "notice": "Maps request IDs to fill IDs."
      },
      "invalidateFill(bytes32,bytes32,uint256)": {
        "notice": "Invalidate the specified fill. In cases that a claim has been made on the source chain, but without a corresponding fill actually happening on the target chain, anyone can call this function to mark the fill as invalid. This is typically followed by a challenge game on the source chain, which the dishonest claimer is guaranteed to lose as soon as the information about the invalid fill (so called \"non-fill proof\") is propagated to the source chain via L1 resolution.",
        "params": {
          "fillId": "The fill ID.",
          "requestId": "The request ID.",
          "sourceChainId": "The source chain ID."
        }
      },
      "l1Resolver()": {
        "notice": "The L1 :sol:contract:`Resolver` contract to be used for L1 resolution."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAllowedLp(address)": {
        "notice": "Remove a liquidity provider from the set of allowed liquidity providers. .. note:: This function can only be called by the contract owner.",
        "params": {
          "oldLp": "The liquidity provider."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setResolver(address)": {
        "notice": "Set the resolver's address Can only ever be set once. Before it is set, no fills or invalidations are possible",
        "params": {
          "_l1Resolver": "The L1 resolver address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "notice": "The fill manager. This contract is responsible for keeping track of filled requests. In addition to allowing agents to (eventually) prove that they filled requests, it also allows anyone to invalidate a claim that a request was filled. It is the only contract that agents need to interact with on the target chain.",
    "version": 1
  },
  "offset": [
    782,
    5989
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x935BEB1A EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x9E375226 EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xAC7F380A EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3FC4C37 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x20158C44 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x31E08F7A EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x3993B6ED EQ PUSH2 0x114 JUMPI DUP1 PUSH4 0x3CB747BF EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x4E543B26 EQ PUSH2 0x166 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0xC25 JUMP JUMPDEST PUSH2 0x1FE JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEE PUSH2 0xDC CALLDATASIZE PUSH1 0x4 PUSH2 0xC51 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCC PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0xC86 JUMP JUMPDEST PUSH2 0x413 JUMP JUMPDEST PUSH2 0xCC PUSH2 0x122 CALLDATASIZE PUSH1 0x4 PUSH2 0xC86 JUMP JUMPDEST PUSH2 0x477 JUMP JUMPDEST PUSH2 0x14E PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xCC PUSH2 0x174 CALLDATASIZE PUSH1 0x4 PUSH2 0xC86 JUMP JUMPDEST PUSH2 0x4D0 JUMP JUMPDEST PUSH2 0xCC PUSH2 0x54A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14E JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x14E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0xC86 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xEE PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0xCA8 JUMP JUMPDEST PUSH2 0x55E JUMP JUMPDEST PUSH2 0xCC PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xC86 JUMP JUMPDEST PUSH2 0x828 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x257 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x14995CDBDB1D995C881859191C995CDCC81B9BDD081CD95D PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 SWAP1 SUB PUSH2 0x2A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x119A5B1B081D985B1A59 PUSH1 0xB2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x24E JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x8A1 JUMP JUMPDEST DUP4 SUB PUSH2 0x309 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420696E76616C69646174652066696C6C73206F66206375727265 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6E7420626C6F636B PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x24E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE CHAINID PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xBB5DDB0F SWAP1 DUP4 SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x14ADC787 PUSH1 0xE3 SHL OR SWAP1 MSTORE MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH2 0x3AE SWAP3 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0xD6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD DUP6 SWAP3 POP DUP7 SWAP2 POP PUSH32 0x931B401CF9BAEDE43DC97F7D9DD4017D44F22BFA0A69668D527D9B5FFF42B90A SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x41B PUSH2 0x8B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x371FC559C30F70424413FED6BF7E57DC939651331ABAD5C970A8EA0921C80B2E SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x47F PUSH2 0x8B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x4E774C97F73F4BEA034579E4224498D7D9B3A4109EAA70ED3D85C97A5855F198 SWAP2 ADD PUSH2 0x46C JUMP JUMPDEST PUSH2 0x4D8 PUSH2 0x8B4 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x528 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14995CDBDB1D995C88185B1C9958591E481CD95D PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x24E JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x552 PUSH2 0x8B4 JUMP JUMPDEST PUSH2 0x55C PUSH1 0x0 PUSH2 0x90E JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14D95B99195C881B9BDD081DDA1A5D195B1A5CDD1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x24E JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x60A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x14995CDBDB1D995C881859191C995CDCC81B9BDD081CD95D PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x24E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP11 SWAP1 MSTORE CHAINID DUP3 DUP5 ADD MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP11 DUP2 SHL DUP3 AND DUP2 DUP6 ADD MSTORE DUP10 SWAP1 SHL AND PUSH1 0x74 DUP4 ADD MSTORE PUSH1 0x88 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT PUSH1 0xA0 DUP8 SWAP1 SHL AND PUSH1 0xA8 DUP4 ADD MSTORE DUP3 MLOAD DUP1 DUP4 SUB PUSH1 0x94 ADD DUP2 MSTORE PUSH1 0xB4 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 SWAP1 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x6C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x105B1C9958591E48199A5B1B1959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x24E JUMP JUMPDEST DUP7 PUSH2 0x6D8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER DUP10 DUP10 PUSH2 0x95E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E2 PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP3 SWAP1 SSTORE MLOAD PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE CHAINID PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD DUP13 SWAP1 MSTORE CALLER PUSH1 0xA4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xBB5DDB0F SWAP1 DUP7 SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x14ADC787 PUSH1 0xE3 SHL OR SWAP1 MSTORE MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH2 0x79A SWAP3 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0xD6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP3 POP DUP13 SWAP2 POP DUP6 SWAP1 PUSH32 0x2995401B199BC45EA8C8B79C27FB204B270CFB74444D546B1A100935E3443887 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x830 PUSH2 0x8B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x895 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x24E JUMP JUMPDEST PUSH2 0x89E DUP2 PUSH2 0x90E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AE PUSH1 0x1 NUMBER PUSH2 0xD90 JUMP JUMPDEST BLOCKHASH SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x55C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x24E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x9B8 SWAP1 DUP6 SWAP1 PUSH2 0x9BE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA13 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA95 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xA90 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xA31 SWAP2 SWAP1 PUSH2 0xDB5 JUMP JUMPDEST PUSH2 0xA90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x24E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAA4 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xAAC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xB0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x24E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xB29 SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB66 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB6B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xB7C DUP8 DUP4 DUP4 DUP8 PUSH2 0xB87 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xBF6 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0xBEF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xBEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x24E JUMP JUMPDEST POP DUP2 PUSH2 0xAA4 JUMP JUMPDEST PUSH2 0xAA4 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0xC0B JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24E SWAP2 SWAP1 PUSH2 0xDF3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCA1 DUP3 PUSH2 0xC6A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xCC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0xCD0 PUSH1 0x20 DUP8 ADD PUSH2 0xC6A JUMP JUMPDEST SWAP4 POP PUSH2 0xCDE PUSH1 0x40 DUP8 ADD PUSH2 0xC6A JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD2F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD17 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x9B8 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xD58 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xD14 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xAA4 SWAP1 DUP4 ADD DUP5 PUSH2 0xD40 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xDB0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xDE9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xD14 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xCA1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD40 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 SWAP6 SAR MOD REVERT MUL SWAP13 PUSH28 0x126C13C8086280651E30CC57802C727C5353F2CB3950C2AB64736F6C PUSH4 0x4300080D STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        782,
        5989
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "5": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "6": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "7": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "8": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "12": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "REVERT",
      "path": "17"
    },
    "16": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "17": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "POP",
      "path": "17"
    },
    "18": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "21": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "LT",
      "path": "17"
    },
    "22": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xB4"
    },
    "25": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "26": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "CALLDATALOAD",
      "path": "17"
    },
    "29": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "SHR",
      "path": "17"
    },
    "32": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "33": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x715018A6"
    },
    "38": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "GT",
      "path": "17"
    },
    "39": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "43": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "44": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x715018A6"
    },
    "49": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "50": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x179"
    },
    "53": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "54": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "55": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x8DA5CB5B"
    },
    "60": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "61": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x181"
    },
    "64": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "65": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "66": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x935BEB1A"
    },
    "71": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "72": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x192"
    },
    "75": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "76": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "77": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x9E375226"
    },
    "82": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "83": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1A5"
    },
    "86": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "87": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "88": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0xAC7F380A"
    },
    "93": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "94": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1D8"
    },
    "97": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "98": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "99": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0xF2FDE38B"
    },
    "104": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "105": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1EB"
    },
    "108": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "109": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "112": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "REVERT",
      "path": "17"
    },
    "113": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "114": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "115": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x3FC4C37"
    },
    "120": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "121": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xB9"
    },
    "124": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "125": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "126": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x20158C44"
    },
    "131": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "132": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xCE"
    },
    "135": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "136": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "137": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x31E08F7A"
    },
    "142": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "143": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x101"
    },
    "146": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "147": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "148": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x3993B6ED"
    },
    "153": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "154": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x114"
    },
    "157": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "158": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "159": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x3CB747BF"
    },
    "164": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "165": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x127"
    },
    "168": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "169": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "170": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x4E543B26"
    },
    "175": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "EQ",
      "path": "17"
    },
    "176": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x166"
    },
    "179": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "180": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "181": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "183": {
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "DUP1",
      "path": "17"
    },
    "184": {
      "first_revert": true,
      "fn": null,
      "offset": [
        782,
        5989
      ],
      "op": "REVERT",
      "path": "17"
    },
    "185": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "186": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xCC"
    },
    "189": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC7"
    },
    "192": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "193": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "195": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC25"
    },
    "198": {
      "fn": "FillManager.invalidateFill",
      "jump": "i",
      "offset": [
        5039,
        5734
      ],
      "op": "JUMP",
      "path": "17"
    },
    "199": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "200": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1FE"
    },
    "203": {
      "fn": "FillManager.invalidateFill",
      "jump": "i",
      "offset": [
        5039,
        5734
      ],
      "op": "JUMP",
      "path": "17"
    },
    "204": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "205": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "STOP",
      "path": "17"
    },
    "206": {
      "offset": [
        1758,
        1798
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "207": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xEE"
    },
    "210": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xDC"
    },
    "213": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "214": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "216": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC51"
    },
    "219": {
      "fn": "FillManager.invalidateFill",
      "jump": "i",
      "offset": [
        1758,
        1798
      ],
      "op": "JUMP",
      "path": "17"
    },
    "220": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "221": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3"
    },
    "223": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "225": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "226": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "228": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "229": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "DUP2",
      "path": "17"
    },
    "230": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "231": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "233": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "234": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "235": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "236": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "DUP2",
      "path": "17"
    },
    "237": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "JUMP",
      "path": "17"
    },
    "238": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "239": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "241": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "242": {
      "op": "SWAP1"
    },
    "243": {
      "op": "DUP2"
    },
    "244": {
      "op": "MSTORE"
    },
    "245": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "247": {
      "op": "ADD"
    },
    "248": {
      "offset": [
        1758,
        1798
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "249": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "251": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "252": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "DUP1",
      "path": "17"
    },
    "253": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "254": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "SUB",
      "path": "17"
    },
    "255": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "256": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1758,
        1798
      ],
      "op": "RETURN",
      "path": "17"
    },
    "257": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMPDEST",
      "path": "18"
    },
    "258": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0xCC"
    },
    "261": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0x10F"
    },
    "264": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "CALLDATASIZE",
      "path": "18"
    },
    "265": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x4"
    },
    "267": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0xC86"
    },
    "270": {
      "fn": "LpWhitelist.addAllowedLp",
      "jump": "i",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMP",
      "path": "18"
    },
    "271": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMPDEST",
      "path": "18"
    },
    "272": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0x413"
    },
    "275": {
      "fn": "LpWhitelist.addAllowedLp",
      "jump": "i",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMP",
      "path": "18"
    },
    "276": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "JUMPDEST",
      "path": "18"
    },
    "277": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0xCC"
    },
    "280": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0x122"
    },
    "283": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "CALLDATASIZE",
      "path": "18"
    },
    "284": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x4"
    },
    "286": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0xC86"
    },
    "289": {
      "fn": "LpWhitelist.removeAllowedLp",
      "jump": "i",
      "offset": [
        1603,
        1733
      ],
      "op": "JUMP",
      "path": "18"
    },
    "290": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "JUMPDEST",
      "path": "18"
    },
    "291": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0x477"
    },
    "294": {
      "fn": "LpWhitelist.removeAllowedLp",
      "jump": "i",
      "offset": [
        1603,
        1733
      ],
      "op": "JUMP",
      "path": "18"
    },
    "295": {
      "offset": [
        1565,
        1602
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "296": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1602
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x14E"
    },
    "299": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1602
      ],
      "op": "PUSH32",
      "path": "17",
      "value": "0x0"
    },
    "332": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1602
      ],
      "op": "DUP2",
      "path": "17"
    },
    "333": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1602
      ],
      "op": "JUMP",
      "path": "17"
    },
    "334": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1602
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "335": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1602
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "337": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1602
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "338": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "340": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "342": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "344": {
      "op": "SHL"
    },
    "345": {
      "op": "SUB"
    },
    "346": {
      "op": "SWAP1"
    },
    "347": {
      "op": "SWAP2"
    },
    "348": {
      "op": "AND"
    },
    "349": {
      "op": "DUP2"
    },
    "350": {
      "op": "MSTORE"
    },
    "351": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "353": {
      "op": "ADD"
    },
    "354": {
      "offset": [
        1565,
        1602
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xF8"
    },
    "357": {
      "op": "JUMP"
    },
    "358": {
      "fn": "FillManager.setResolver",
      "offset": [
        2158,
        2325
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "359": {
      "fn": "FillManager.setResolver",
      "offset": [
        2158,
        2325
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xCC"
    },
    "362": {
      "fn": "FillManager.setResolver",
      "offset": [
        2158,
        2325
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x174"
    },
    "365": {
      "fn": "FillManager.setResolver",
      "offset": [
        2158,
        2325
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "366": {
      "fn": "FillManager.setResolver",
      "offset": [
        2158,
        2325
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "368": {
      "fn": "FillManager.setResolver",
      "offset": [
        2158,
        2325
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC86"
    },
    "371": {
      "fn": "FillManager.setResolver",
      "jump": "i",
      "offset": [
        2158,
        2325
      ],
      "op": "JUMP",
      "path": "17"
    },
    "372": {
      "fn": "FillManager.setResolver",
      "offset": [
        2158,
        2325
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "373": {
      "fn": "FillManager.setResolver",
      "offset": [
        2158,
        2325
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x4D0"
    },
    "376": {
      "fn": "FillManager.setResolver",
      "jump": "i",
      "offset": [
        2158,
        2325
      ],
      "op": "JUMP",
      "path": "17"
    },
    "377": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "378": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCC"
    },
    "381": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x54A"
    },
    "384": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMP",
      "path": "0"
    },
    "385": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "386": {
      "fn": "Ownable.owner",
      "offset": [
        1247,
        1254
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "388": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "SLOAD",
      "path": "0",
      "statement": 0
    },
    "389": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "391": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "393": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "395": {
      "op": "SHL"
    },
    "396": {
      "op": "SUB"
    },
    "397": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "AND",
      "path": "0"
    },
    "398": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14E"
    },
    "401": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "JUMP",
      "path": "0"
    },
    "402": {
      "offset": [
        1688,
        1713
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "403": {
      "fn": "Ownable.owner",
      "offset": [
        1688,
        1713
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "405": {
      "fn": "Ownable.owner",
      "offset": [
        1688,
        1713
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "406": {
      "fn": "Ownable.owner",
      "offset": [
        1688,
        1713
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x14E"
    },
    "409": {
      "fn": "Ownable.owner",
      "offset": [
        1688,
        1713
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "410": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "412": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "414": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "416": {
      "op": "SHL"
    },
    "417": {
      "op": "SUB"
    },
    "418": {
      "offset": [
        1688,
        1713
      ],
      "op": "AND",
      "path": "17"
    },
    "419": {
      "fn": "Ownable.owner",
      "offset": [
        1688,
        1713
      ],
      "op": "DUP2",
      "path": "17"
    },
    "420": {
      "fn": "Ownable.owner",
      "offset": [
        1688,
        1713
      ],
      "op": "JUMP",
      "path": "17"
    },
    "421": {
      "offset": [
        820,
        862
      ],
      "op": "JUMPDEST",
      "path": "18"
    },
    "422": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0x1C8"
    },
    "425": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0x1B3"
    },
    "428": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "CALLDATASIZE",
      "path": "18"
    },
    "429": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x4"
    },
    "431": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0xC86"
    },
    "434": {
      "fn": "Ownable.owner",
      "jump": "i",
      "offset": [
        820,
        862
      ],
      "op": "JUMP",
      "path": "18"
    },
    "435": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "JUMPDEST",
      "path": "18"
    },
    "436": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x1"
    },
    "438": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x20"
    },
    "440": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "MSTORE",
      "path": "18"
    },
    "441": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x0"
    },
    "443": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "SWAP1",
      "path": "18"
    },
    "444": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "DUP2",
      "path": "18"
    },
    "445": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "MSTORE",
      "path": "18"
    },
    "446": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x40"
    },
    "448": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "SWAP1",
      "path": "18"
    },
    "449": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "KECCAK256",
      "path": "18"
    },
    "450": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "SLOAD",
      "path": "18"
    },
    "451": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0xFF"
    },
    "453": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "AND",
      "path": "18"
    },
    "454": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "DUP2",
      "path": "18"
    },
    "455": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "JUMP",
      "path": "18"
    },
    "456": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "JUMPDEST",
      "path": "18"
    },
    "457": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x40"
    },
    "459": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "MLOAD",
      "path": "18"
    },
    "460": {
      "op": "SWAP1"
    },
    "461": {
      "op": "ISZERO"
    },
    "462": {
      "op": "ISZERO"
    },
    "463": {
      "op": "DUP2"
    },
    "464": {
      "op": "MSTORE"
    },
    "465": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "467": {
      "op": "ADD"
    },
    "468": {
      "offset": [
        820,
        862
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0xF8"
    },
    "471": {
      "op": "JUMP"
    },
    "472": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3100,
        4373
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "473": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3100,
        4373
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xEE"
    },
    "476": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3100,
        4373
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1E6"
    },
    "479": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3100,
        4373
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "480": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3100,
        4373
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "482": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3100,
        4373
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xCA8"
    },
    "485": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3100,
        4373
      ],
      "op": "JUMP",
      "path": "17"
    },
    "486": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3100,
        4373
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "487": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3100,
        4373
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x55E"
    },
    "490": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3100,
        4373
      ],
      "op": "JUMP",
      "path": "17"
    },
    "491": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "492": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCC"
    },
    "495": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F9"
    },
    "498": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "499": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "501": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC86"
    },
    "504": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMP",
      "path": "0"
    },
    "505": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "506": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x828"
    },
    "509": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMP",
      "path": "0"
    },
    "510": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "511": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5192,
        5202
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "513": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5192,
        5202
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "514": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "516": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "518": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "520": {
      "op": "SHL"
    },
    "521": {
      "op": "SUB"
    },
    "522": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5192,
        5202
      ],
      "op": "AND",
      "path": "17"
    },
    "523": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5192,
        5202
      ],
      "op": "DUP1",
      "path": "17"
    },
    "524": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "PUSH2",
      "path": "17",
      "statement": 1,
      "value": "0x257"
    },
    "527": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "528": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "530": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "531": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "535": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "537": {
      "op": "SHL"
    },
    "538": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "DUP2",
      "path": "17"
    },
    "539": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "540": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "542": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "544": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "DUP3",
      "path": "17"
    },
    "545": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "ADD",
      "path": "17"
    },
    "546": {
      "op": "MSTORE"
    },
    "547": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "549": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "551": {
      "op": "DUP3"
    },
    "552": {
      "op": "ADD"
    },
    "553": {
      "op": "MSTORE"
    },
    "554": {
      "op": "PUSH24",
      "value": "0x14995CDBDB1D995C881859191C995CDCC81B9BDD081CD95D"
    },
    "579": {
      "op": "PUSH1",
      "value": "0x42"
    },
    "581": {
      "op": "SHL"
    },
    "582": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "584": {
      "op": "DUP3"
    },
    "585": {
      "op": "ADD"
    },
    "586": {
      "op": "MSTORE"
    },
    "587": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "589": {
      "op": "ADD"
    },
    "590": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "591": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "593": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "594": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "DUP1",
      "path": "17"
    },
    "595": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "596": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "SUB",
      "path": "17"
    },
    "597": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "598": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "17"
    },
    "599": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5212,
        5274
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "600": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5308
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 2,
      "value": "0x0"
    },
    "602": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5308
      ],
      "op": "DUP5",
      "path": "17"
    },
    "603": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5308
      ],
      "op": "DUP2",
      "path": "17"
    },
    "604": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5308
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "605": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5297
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3"
    },
    "607": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5308
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "609": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5308
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "610": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5308
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "612": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5308
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "613": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5308
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "614": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5308
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "615": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5318
      ],
      "op": "DUP4",
      "path": "17"
    },
    "616": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5318
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "617": {
      "branch": 38,
      "fn": "FillManager.invalidateFill",
      "offset": [
        5292,
        5318
      ],
      "op": "SUB",
      "path": "17"
    },
    "618": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5284,
        5333
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x2A2"
    },
    "621": {
      "branch": 38,
      "fn": "FillManager.invalidateFill",
      "offset": [
        5284,
        5333
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "622": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5284,
        5333
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "624": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5284,
        5333
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "625": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "629": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "631": {
      "op": "SHL"
    },
    "632": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5284,
        5333
      ],
      "op": "DUP2",
      "path": "17"
    },
    "633": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5284,
        5333
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "634": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "636": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5284,
        5333
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "638": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5284,
        5333
      ],
      "op": "DUP3",
      "path": "17"
    },
    "639": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5284,
        5333
      ],
      "op": "ADD",
      "path": "17"
    },
    "640": {
      "op": "MSTORE"
    },
    "641": {
      "op": "PUSH1",
      "value": "0xA"
    },
    "643": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "645": {
      "op": "DUP3"
    },
    "646": {
      "op": "ADD"
    },
    "647": {
      "op": "MSTORE"
    },
    "648": {
      "op": "PUSH10",
      "value": "0x119A5B1B081D985B1A59"
    },
    "659": {
      "op": "PUSH1",
      "value": "0xB2"
    },
    "661": {
      "op": "SHL"
    },
    "662": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "664": {
      "op": "DUP3"
    },
    "665": {
      "op": "ADD"
    },
    "666": {
      "op": "MSTORE"
    },
    "667": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "669": {
      "op": "ADD"
    },
    "670": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5284,
        5333
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x24E"
    },
    "673": {
      "op": "JUMP"
    },
    "674": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5284,
        5333
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "675": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5374,
        5390
      ],
      "op": "PUSH2",
      "path": "17",
      "statement": 3,
      "value": "0x2AA"
    },
    "678": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5374,
        5388
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x8A1"
    },
    "681": {
      "fn": "FillManager.invalidateFill",
      "jump": "i",
      "offset": [
        5374,
        5390
      ],
      "op": "JUMP",
      "path": "17"
    },
    "682": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5374,
        5390
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "683": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5364,
        5370
      ],
      "op": "DUP4",
      "path": "17"
    },
    "684": {
      "branch": 39,
      "fn": "FillManager.invalidateFill",
      "offset": [
        5364,
        5390
      ],
      "op": "SUB",
      "path": "17"
    },
    "685": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5343,
        5456
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x309"
    },
    "688": {
      "branch": 39,
      "fn": "FillManager.invalidateFill",
      "offset": [
        5343,
        5456
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "689": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5343,
        5456
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "691": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5343,
        5456
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "692": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "696": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "698": {
      "op": "SHL"
    },
    "699": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5343,
        5456
      ],
      "op": "DUP2",
      "path": "17"
    },
    "700": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5343,
        5456
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "701": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "703": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5343,
        5456
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "705": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5343,
        5456
      ],
      "op": "DUP3",
      "path": "17"
    },
    "706": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5343,
        5456
      ],
      "op": "ADD",
      "path": "17"
    },
    "707": {
      "op": "MSTORE"
    },
    "708": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "710": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "712": {
      "op": "DUP3"
    },
    "713": {
      "op": "ADD"
    },
    "714": {
      "op": "MSTORE"
    },
    "715": {
      "op": "PUSH32",
      "value": "0x43616E6E6F7420696E76616C69646174652066696C6C73206F66206375727265"
    },
    "748": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "750": {
      "op": "DUP3"
    },
    "751": {
      "op": "ADD"
    },
    "752": {
      "op": "MSTORE"
    },
    "753": {
      "op": "PUSH8",
      "value": "0x6E7420626C6F636B"
    },
    "762": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "764": {
      "op": "SHL"
    },
    "765": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "767": {
      "op": "DUP3"
    },
    "768": {
      "op": "ADD"
    },
    "769": {
      "op": "MSTORE"
    },
    "770": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "772": {
      "op": "ADD"
    },
    "773": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5343,
        5456
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x24E"
    },
    "776": {
      "op": "JUMP"
    },
    "777": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5343,
        5456
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "778": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 4,
      "value": "0x40"
    },
    "780": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "781": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x24"
    },
    "783": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "DUP2",
      "path": "17"
    },
    "784": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "ADD",
      "path": "17"
    },
    "785": {
      "op": "DUP6"
    },
    "786": {
      "op": "SWAP1"
    },
    "787": {
      "op": "MSTORE"
    },
    "788": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "790": {
      "op": "DUP2"
    },
    "791": {
      "op": "ADD"
    },
    "792": {
      "op": "DUP5"
    },
    "793": {
      "op": "SWAP1"
    },
    "794": {
      "op": "MSTORE"
    },
    "795": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5613,
        5626
      ],
      "op": "CHAINID",
      "path": "17"
    },
    "796": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "798": {
      "op": "DUP3"
    },
    "799": {
      "op": "ADD"
    },
    "800": {
      "op": "MSTORE"
    },
    "801": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "803": {
      "op": "DUP2"
    },
    "804": {
      "op": "ADD"
    },
    "805": {
      "op": "DUP4"
    },
    "806": {
      "op": "SWAP1"
    },
    "807": {
      "op": "MSTORE"
    },
    "808": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5651,
        5652
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "810": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "812": {
      "op": "DUP3"
    },
    "813": {
      "op": "ADD"
    },
    "814": {
      "op": "MSTORE"
    },
    "815": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "817": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "819": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "821": {
      "op": "SHL"
    },
    "822": {
      "op": "SUB"
    },
    "823": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5476
      ],
      "op": "PUSH32",
      "path": "17",
      "value": "0x0"
    },
    "856": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5488
      ],
      "op": "AND",
      "path": "17"
    },
    "857": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5488
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "858": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5488
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0xBB5DDB0F"
    },
    "863": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5488
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "864": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5502,
        5513
      ],
      "op": "DUP4",
      "path": "17"
    },
    "865": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5502,
        5513
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "866": {
      "op": "PUSH1",
      "value": "0xC4"
    },
    "868": {
      "op": "ADD"
    },
    "869": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "871": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "DUP1",
      "path": "17"
    },
    "872": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "873": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "875": {
      "op": "NOT"
    },
    "876": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "DUP2",
      "path": "17"
    },
    "877": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "DUP5",
      "path": "17"
    },
    "878": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "SUB",
      "path": "17"
    },
    "879": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "ADD",
      "path": "17"
    },
    "880": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "DUP2",
      "path": "17"
    },
    "881": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "882": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "883": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "DUP2",
      "path": "17"
    },
    "884": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "885": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "887": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "DUP3",
      "path": "17"
    },
    "888": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "ADD",
      "path": "17"
    },
    "889": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "DUP1",
      "path": "17"
    },
    "890": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "891": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "893": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "895": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "897": {
      "op": "SHL"
    },
    "898": {
      "op": "SUB"
    },
    "899": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "AND",
      "path": "17"
    },
    "900": {
      "op": "PUSH4",
      "value": "0x14ADC787"
    },
    "905": {
      "op": "PUSH1",
      "value": "0xE3"
    },
    "907": {
      "op": "SHL"
    },
    "908": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "OR",
      "path": "17"
    },
    "909": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "910": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "911": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "912": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "914": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "916": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "918": {
      "op": "SHL"
    },
    "919": {
      "op": "SUB"
    },
    "920": {
      "op": "NOT"
    },
    "921": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xE0"
    },
    "923": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "DUP6",
      "path": "17"
    },
    "924": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "925": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "SHL",
      "path": "17"
    },
    "926": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "AND",
      "path": "17"
    },
    "927": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "DUP2",
      "path": "17"
    },
    "928": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "929": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x3AE"
    },
    "932": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "933": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "934": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5527,
        5668
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "935": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "937": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "ADD",
      "path": "17"
    },
    "938": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD6C"
    },
    "941": {
      "fn": "FillManager.invalidateFill",
      "jump": "i",
      "offset": [
        5467,
        5678
      ],
      "op": "JUMP",
      "path": "17"
    },
    "942": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "943": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "945": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "947": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "948": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "DUP1",
      "path": "17"
    },
    "949": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "DUP4",
      "path": "17"
    },
    "950": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "SUB",
      "path": "17"
    },
    "951": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "DUP2",
      "path": "17"
    },
    "952": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "954": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "DUP8",
      "path": "17"
    },
    "955": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "DUP1",
      "path": "17"
    },
    "956": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "EXTCODESIZE",
      "path": "17"
    },
    "957": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "958": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "DUP1",
      "path": "17"
    },
    "959": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "960": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x3C8"
    },
    "963": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "964": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "966": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "DUP1",
      "path": "17"
    },
    "967": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "REVERT",
      "path": "17"
    },
    "968": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "969": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "POP",
      "path": "17"
    },
    "970": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "GAS",
      "path": "17"
    },
    "971": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "CALL",
      "path": "17"
    },
    "972": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "973": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "DUP1",
      "path": "17"
    },
    "974": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "975": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x3DC"
    },
    "978": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "979": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "980": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "982": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "DUP1",
      "path": "17"
    },
    "983": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "RETURNDATACOPY",
      "path": "17"
    },
    "984": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "985": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "987": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "REVERT",
      "path": "17"
    },
    "988": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5467,
        5678
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "989": {
      "op": "POP"
    },
    "990": {
      "op": "POP"
    },
    "991": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5693,
        5727
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 5,
      "value": "0x40"
    },
    "993": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5693,
        5727
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "994": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5720,
        5726
      ],
      "op": "DUP6",
      "path": "17"
    },
    "995": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5720,
        5726
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "996": {
      "op": "POP"
    },
    "997": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5709,
        5718
      ],
      "op": "DUP7",
      "path": "17"
    },
    "998": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5709,
        5718
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "999": {
      "op": "POP"
    },
    "1000": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5693,
        5727
      ],
      "op": "PUSH32",
      "path": "17",
      "value": "0x931B401CF9BAEDE43DC97F7D9DD4017D44F22BFA0A69668D527D9B5FFF42B90A"
    },
    "1033": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5693,
        5727
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1034": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5693,
        5727
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1036": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5693,
        5727
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1037": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5693,
        5727
      ],
      "op": "LOG3",
      "path": "17"
    },
    "1038": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5160,
        5734
      ],
      "op": "POP",
      "path": "17"
    },
    "1039": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "POP",
      "path": "17"
    },
    "1040": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "POP",
      "path": "17"
    },
    "1041": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5039,
        5734
      ],
      "op": "POP",
      "path": "17"
    },
    "1042": {
      "fn": "FillManager.invalidateFill",
      "jump": "o",
      "offset": [
        5039,
        5734
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1043": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMPDEST",
      "path": "18"
    },
    "1044": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41B"
    },
    "1047": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8B4"
    },
    "1050": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1051": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1052": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1054": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1056": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1058": {
      "op": "SHL"
    },
    "1059": {
      "op": "SUB"
    },
    "1060": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP2",
      "path": "18",
      "statement": 6
    },
    "1061": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "AND",
      "path": "18"
    },
    "1062": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x0"
    },
    "1064": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP2",
      "path": "18"
    },
    "1065": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP2",
      "path": "18"
    },
    "1066": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "MSTORE",
      "path": "18"
    },
    "1067": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1340,
        1344
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x1"
    },
    "1069": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x20"
    },
    "1071": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP2",
      "path": "18"
    },
    "1072": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP2",
      "path": "18"
    },
    "1073": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "MSTORE",
      "path": "18"
    },
    "1074": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x40"
    },
    "1076": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "SWAP3",
      "path": "18"
    },
    "1077": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP4",
      "path": "18"
    },
    "1078": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "SWAP1",
      "path": "18"
    },
    "1079": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "KECCAK256",
      "path": "18"
    },
    "1080": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "DUP1",
      "path": "18"
    },
    "1081": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SLOAD",
      "path": "18"
    },
    "1082": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1084": {
      "op": "NOT"
    },
    "1085": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "AND",
      "path": "18"
    },
    "1086": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SWAP1",
      "path": "18"
    },
    "1087": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SWAP3",
      "path": "18"
    },
    "1088": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "OR",
      "path": "18"
    },
    "1089": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SWAP1",
      "path": "18"
    },
    "1090": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SWAP2",
      "path": "18"
    },
    "1091": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SSTORE",
      "path": "18"
    },
    "1092": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "SWAP1",
      "path": "18",
      "statement": 7
    },
    "1093": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "MLOAD",
      "path": "18"
    },
    "1094": {
      "op": "SWAP2"
    },
    "1095": {
      "op": "DUP3"
    },
    "1096": {
      "op": "MSTORE"
    },
    "1097": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "PUSH32",
      "path": "18",
      "value": "0x371FC559C30F70424413FED6BF7E57DC939651331ABAD5C970A8EA0921C80B2E"
    },
    "1130": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "SWAP2",
      "path": "18"
    },
    "1131": {
      "op": "ADD"
    },
    "1132": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "JUMPDEST",
      "path": "18"
    },
    "1133": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x40"
    },
    "1135": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "MLOAD",
      "path": "18"
    },
    "1136": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "DUP1",
      "path": "18"
    },
    "1137": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "SWAP2",
      "path": "18"
    },
    "1138": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "SUB",
      "path": "18"
    },
    "1139": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "SWAP1",
      "path": "18"
    },
    "1140": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "LOG1",
      "path": "18"
    },
    "1141": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "POP",
      "path": "18"
    },
    "1142": {
      "fn": "LpWhitelist.addAllowedLp",
      "jump": "o",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMP",
      "path": "18"
    },
    "1143": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "JUMPDEST",
      "path": "18"
    },
    "1144": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x47F"
    },
    "1147": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8B4"
    },
    "1150": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1151": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1152": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1154": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1156": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1158": {
      "op": "SHL"
    },
    "1159": {
      "op": "SUB"
    },
    "1160": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "DUP2",
      "path": "18",
      "statement": 8
    },
    "1161": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "AND",
      "path": "18"
    },
    "1162": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x0"
    },
    "1164": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "DUP2",
      "path": "18"
    },
    "1165": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "DUP2",
      "path": "18"
    },
    "1166": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "MSTORE",
      "path": "18"
    },
    "1167": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1687
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x1"
    },
    "1169": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x20"
    },
    "1171": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "SWAP1",
      "path": "18"
    },
    "1172": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "DUP2",
      "path": "18"
    },
    "1173": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "MSTORE",
      "path": "18"
    },
    "1174": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x40"
    },
    "1176": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "SWAP2",
      "path": "18"
    },
    "1177": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "DUP3",
      "path": "18"
    },
    "1178": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "SWAP1",
      "path": "18"
    },
    "1179": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "KECCAK256",
      "path": "18"
    },
    "1180": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1670,
        1694
      ],
      "op": "DUP1",
      "path": "18"
    },
    "1181": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1670,
        1694
      ],
      "op": "SLOAD",
      "path": "18"
    },
    "1182": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1184": {
      "op": "NOT"
    },
    "1185": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1670,
        1694
      ],
      "op": "AND",
      "path": "18"
    },
    "1186": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1670,
        1694
      ],
      "op": "SWAP1",
      "path": "18"
    },
    "1187": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1670,
        1694
      ],
      "op": "SSTORE",
      "path": "18"
    },
    "1188": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1710,
        1726
      ],
      "op": "SWAP1",
      "path": "18",
      "statement": 9
    },
    "1189": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1710,
        1726
      ],
      "op": "MLOAD",
      "path": "18"
    },
    "1190": {
      "op": "SWAP2"
    },
    "1191": {
      "op": "DUP3"
    },
    "1192": {
      "op": "MSTORE"
    },
    "1193": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1710,
        1726
      ],
      "op": "PUSH32",
      "path": "18",
      "value": "0x4E774C97F73F4BEA034579E4224498D7D9B3A4109EAA70ED3D85C97A5855F198"
    },
    "1226": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1710,
        1726
      ],
      "op": "SWAP2",
      "path": "18"
    },
    "1227": {
      "op": "ADD"
    },
    "1228": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1710,
        1726
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0x46C"
    },
    "1231": {
      "op": "JUMP"
    },
    "1232": {
      "fn": "FillManager.setResolver",
      "offset": [
        2158,
        2325
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1233": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D8"
    },
    "1236": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8B4"
    },
    "1239": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1240": {
      "fn": "FillManager.setResolver",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1241": {
      "fn": "FillManager.setResolver",
      "offset": [
        2235,
        2245
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 10,
      "value": "0x2"
    },
    "1243": {
      "fn": "FillManager.setResolver",
      "offset": [
        2235,
        2245
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1244": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1246": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1248": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1250": {
      "op": "SHL"
    },
    "1251": {
      "op": "SUB"
    },
    "1252": {
      "fn": "FillManager.setResolver",
      "offset": [
        2235,
        2245
      ],
      "op": "AND",
      "path": "17"
    },
    "1253": {
      "branch": 40,
      "fn": "FillManager.setResolver",
      "offset": [
        2235,
        2259
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1254": {
      "fn": "FillManager.setResolver",
      "offset": [
        2227,
        2284
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x528"
    },
    "1257": {
      "branch": 40,
      "fn": "FillManager.setResolver",
      "offset": [
        2227,
        2284
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1258": {
      "fn": "FillManager.setResolver",
      "offset": [
        2227,
        2284
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1260": {
      "fn": "FillManager.setResolver",
      "offset": [
        2227,
        2284
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1261": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1265": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1267": {
      "op": "SHL"
    },
    "1268": {
      "fn": "FillManager.setResolver",
      "offset": [
        2227,
        2284
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1269": {
      "fn": "FillManager.setResolver",
      "offset": [
        2227,
        2284
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1270": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1272": {
      "fn": "FillManager.setResolver",
      "offset": [
        2227,
        2284
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1274": {
      "fn": "FillManager.setResolver",
      "offset": [
        2227,
        2284
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1275": {
      "fn": "FillManager.setResolver",
      "offset": [
        2227,
        2284
      ],
      "op": "ADD",
      "path": "17"
    },
    "1276": {
      "op": "MSTORE"
    },
    "1277": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "1279": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1281": {
      "op": "DUP3"
    },
    "1282": {
      "op": "ADD"
    },
    "1283": {
      "op": "MSTORE"
    },
    "1284": {
      "op": "PUSH20",
      "value": "0x14995CDBDB1D995C88185B1C9958591E481CD95D"
    },
    "1305": {
      "op": "PUSH1",
      "value": "0x62"
    },
    "1307": {
      "op": "SHL"
    },
    "1308": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1310": {
      "op": "DUP3"
    },
    "1311": {
      "op": "ADD"
    },
    "1312": {
      "op": "MSTORE"
    },
    "1313": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1315": {
      "op": "ADD"
    },
    "1316": {
      "fn": "FillManager.setResolver",
      "offset": [
        2227,
        2284
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x24E"
    },
    "1319": {
      "op": "JUMP"
    },
    "1320": {
      "fn": "FillManager.setResolver",
      "offset": [
        2227,
        2284
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1321": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2304
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 11,
      "value": "0x2"
    },
    "1323": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1324": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1331": {
      "op": "SHL"
    },
    "1332": {
      "op": "SUB"
    },
    "1333": {
      "op": "NOT"
    },
    "1334": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "AND",
      "path": "17"
    },
    "1335": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1337": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1339": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1341": {
      "op": "SHL"
    },
    "1342": {
      "op": "SUB"
    },
    "1343": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "1344": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1345": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "1346": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "AND",
      "path": "17"
    },
    "1347": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1348": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1349": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1350": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "OR",
      "path": "17"
    },
    "1351": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1352": {
      "fn": "FillManager.setResolver",
      "offset": [
        2294,
        2318
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "1353": {
      "fn": "FillManager.setResolver",
      "jump": "o",
      "offset": [
        2158,
        2325
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1354": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1355": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x552"
    },
    "1358": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8B4"
    },
    "1361": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1362": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1363": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1895,
        1925
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 12,
      "value": "0x55C"
    },
    "1366": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1922,
        1923
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1368": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1895,
        1913
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x90E"
    },
    "1371": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1895,
        1925
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1372": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1895,
        1925
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1373": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1374": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3100,
        4373
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1375": {
      "offset": [
        983,
        993
      ],
      "op": "CALLER",
      "path": "18"
    },
    "1376": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3311,
        3318
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1378": {
      "offset": [
        972,
        994
      ],
      "op": "SWAP1",
      "path": "18"
    },
    "1379": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "DUP2",
      "path": "18"
    },
    "1380": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "MSTORE",
      "path": "18"
    },
    "1381": {
      "offset": [
        972,
        982
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x1"
    },
    "1383": {
      "offset": [
        972,
        994
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x20"
    },
    "1385": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "MSTORE",
      "path": "18"
    },
    "1386": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x40"
    },
    "1388": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "DUP2",
      "path": "18"
    },
    "1389": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "KECCAK256",
      "path": "18"
    },
    "1390": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "SLOAD",
      "path": "18"
    },
    "1391": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0xFF"
    },
    "1393": {
      "branch": 46,
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "AND",
      "path": "18"
    },
    "1394": {
      "offset": [
        964,
        1021
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0x5B6"
    },
    "1397": {
      "branch": 46,
      "offset": [
        964,
        1021
      ],
      "op": "JUMPI",
      "path": "18"
    },
    "1398": {
      "fn": "FillManager.fillRequest",
      "offset": [
        964,
        1021
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x40"
    },
    "1400": {
      "fn": "FillManager.fillRequest",
      "offset": [
        964,
        1021
      ],
      "op": "MLOAD",
      "path": "18"
    },
    "1401": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1405": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1407": {
      "op": "SHL"
    },
    "1408": {
      "offset": [
        964,
        1021
      ],
      "op": "DUP2",
      "path": "18"
    },
    "1409": {
      "fn": "FillManager.fillRequest",
      "offset": [
        964,
        1021
      ],
      "op": "MSTORE",
      "path": "18"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1412": {
      "offset": [
        964,
        1021
      ],
      "op": "PUSH1",
      "path": "18",
      "value": "0x4"
    },
    "1414": {
      "fn": "FillManager.fillRequest",
      "offset": [
        964,
        1021
      ],
      "op": "DUP3",
      "path": "18"
    },
    "1415": {
      "fn": "FillManager.fillRequest",
      "offset": [
        964,
        1021
      ],
      "op": "ADD",
      "path": "18"
    },
    "1416": {
      "op": "MSTORE"
    },
    "1417": {
      "op": "PUSH1",
      "value": "0x16"
    },
    "1419": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1421": {
      "op": "DUP3"
    },
    "1422": {
      "op": "ADD"
    },
    "1423": {
      "op": "MSTORE"
    },
    "1424": {
      "op": "PUSH22",
      "value": "0x14D95B99195C881B9BDD081DDA1A5D195B1A5CDD1959"
    },
    "1447": {
      "op": "PUSH1",
      "value": "0x52"
    },
    "1449": {
      "op": "SHL"
    },
    "1450": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1452": {
      "op": "DUP3"
    },
    "1453": {
      "op": "ADD"
    },
    "1454": {
      "op": "MSTORE"
    },
    "1455": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1457": {
      "op": "ADD"
    },
    "1458": {
      "offset": [
        964,
        1021
      ],
      "op": "PUSH2",
      "path": "18",
      "value": "0x24E"
    },
    "1461": {
      "op": "JUMP"
    },
    "1462": {
      "offset": [
        964,
        1021
      ],
      "op": "JUMPDEST",
      "path": "18"
    },
    "1463": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3352,
        3362
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "1465": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3352,
        3362
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1466": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1468": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1470": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1472": {
      "op": "SHL"
    },
    "1473": {
      "op": "SUB"
    },
    "1474": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3352,
        3362
      ],
      "op": "AND",
      "path": "17"
    },
    "1475": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3352,
        3362
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1476": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3372,
        3434
      ],
      "op": "PUSH2",
      "path": "17",
      "statement": 13,
      "value": "0x60A"
    },
    "1479": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3372,
        3434
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1480": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3372,
        3434
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1482": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3372,
        3434
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1483": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1487": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1489": {
      "op": "SHL"
    },
    "1490": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3372,
        3434
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1491": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3372,
        3434
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1492": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1494": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3372,
        3434
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1496": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3372,
        3434
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1497": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3372,
        3434
      ],
      "op": "ADD",
      "path": "17"
    },
    "1498": {
      "op": "MSTORE"
    },
    "1499": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "1501": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1503": {
      "op": "DUP3"
    },
    "1504": {
      "op": "ADD"
    },
    "1505": {
      "op": "MSTORE"
    },
    "1506": {
      "op": "PUSH24",
      "value": "0x14995CDBDB1D995C881859191C995CDCC81B9BDD081CD95D"
    },
    "1531": {
      "op": "PUSH1",
      "value": "0x42"
    },
    "1533": {
      "op": "SHL"
    },
    "1534": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1536": {
      "op": "DUP3"
    },
    "1537": {
      "op": "ADD"
    },
    "1538": {
      "op": "MSTORE"
    },
    "1539": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1541": {
      "op": "ADD"
    },
    "1542": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3372,
        3434
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x24E"
    },
    "1545": {
      "op": "JUMP"
    },
    "1546": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3372,
        3434
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1547": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 14,
      "value": "0x40"
    },
    "1549": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1550": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1551": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1553": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1554": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1555": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "ADD",
      "path": "16"
    },
    "1556": {
      "op": "DUP11"
    },
    "1557": {
      "op": "SWAP1"
    },
    "1558": {
      "op": "MSTORE"
    },
    "1559": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3532,
        3545
      ],
      "op": "CHAINID",
      "path": "17"
    },
    "1560": {
      "op": "DUP3"
    },
    "1561": {
      "op": "DUP5"
    },
    "1562": {
      "op": "ADD"
    },
    "1563": {
      "op": "MSTORE"
    },
    "1564": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "1577": {
      "op": "NOT"
    },
    "1578": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1580": {
      "op": "DUP11"
    },
    "1581": {
      "op": "DUP2"
    },
    "1582": {
      "op": "SHL"
    },
    "1583": {
      "op": "DUP3"
    },
    "1584": {
      "op": "AND"
    },
    "1585": {
      "op": "DUP2"
    },
    "1586": {
      "op": "DUP6"
    },
    "1587": {
      "op": "ADD"
    },
    "1588": {
      "op": "MSTORE"
    },
    "1589": {
      "op": "DUP10"
    },
    "1590": {
      "op": "SWAP1"
    },
    "1591": {
      "op": "SHL"
    },
    "1592": {
      "op": "AND"
    },
    "1593": {
      "op": "PUSH1",
      "value": "0x74"
    },
    "1595": {
      "op": "DUP4"
    },
    "1596": {
      "op": "ADD"
    },
    "1597": {
      "op": "MSTORE"
    },
    "1598": {
      "op": "PUSH1",
      "value": "0x88"
    },
    "1600": {
      "op": "DUP3"
    },
    "1601": {
      "op": "ADD"
    },
    "1602": {
      "op": "DUP8"
    },
    "1603": {
      "op": "SWAP1"
    },
    "1604": {
      "op": "MSTORE"
    },
    "1605": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1607": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1609": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1611": {
      "op": "SHL"
    },
    "1612": {
      "op": "SUB"
    },
    "1613": {
      "op": "NOT"
    },
    "1614": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1616": {
      "op": "DUP8"
    },
    "1617": {
      "op": "SWAP1"
    },
    "1618": {
      "op": "SHL"
    },
    "1619": {
      "op": "AND"
    },
    "1620": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "1622": {
      "op": "DUP4"
    },
    "1623": {
      "op": "ADD"
    },
    "1624": {
      "op": "MSTORE"
    },
    "1625": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1626": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1627": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1628": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1629": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "SUB",
      "path": "16"
    },
    "1630": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x94"
    },
    "1632": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "ADD",
      "path": "16"
    },
    "1633": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1634": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1635": {
      "op": "PUSH1",
      "value": "0xB4"
    },
    "1637": {
      "op": "SWAP1"
    },
    "1638": {
      "op": "SWAP3"
    },
    "1639": {
      "op": "ADD"
    },
    "1640": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1641": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1642": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        386,
        628
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1643": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        359,
        642
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1644": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        359,
        642
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1645": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        359,
        642
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1646": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        359,
        642
      ],
      "op": "ADD",
      "path": "16"
    },
    "1647": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        359,
        642
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "1648": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3444,
        3461
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1650": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3444,
        3461
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1651": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3708,
        3709
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 15,
      "value": "0x0"
    },
    "1653": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3680,
        3696
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1654": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3680,
        3696
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1655": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3680,
        3696
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1656": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3680,
        3685
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3"
    },
    "1658": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3680,
        3696
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1660": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3680,
        3696
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1661": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3680,
        3696
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1663": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3680,
        3696
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1664": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3680,
        3696
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1665": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3680,
        3696
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1666": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3444,
        3661
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1667": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3444,
        3661
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1668": {
      "op": "POP"
    },
    "1669": {
      "branch": 41,
      "fn": "FillManager.fillRequest",
      "offset": [
        3680,
        3710
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1670": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3729
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x6C2"
    },
    "1673": {
      "branch": 41,
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3729
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1674": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3729
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1676": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3729
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1677": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1681": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1683": {
      "op": "SHL"
    },
    "1684": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3729
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1685": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3729
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1686": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1688": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3729
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1690": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3729
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1691": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3729
      ],
      "op": "ADD",
      "path": "17"
    },
    "1692": {
      "op": "MSTORE"
    },
    "1693": {
      "op": "PUSH1",
      "value": "0xE"
    },
    "1695": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1697": {
      "op": "DUP3"
    },
    "1698": {
      "op": "ADD"
    },
    "1699": {
      "op": "MSTORE"
    },
    "1700": {
      "op": "PUSH14",
      "value": "0x105B1C9958591E48199A5B1B1959"
    },
    "1715": {
      "op": "PUSH1",
      "value": "0x92"
    },
    "1717": {
      "op": "SHL"
    },
    "1718": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1720": {
      "op": "DUP3"
    },
    "1721": {
      "op": "ADD"
    },
    "1722": {
      "op": "MSTORE"
    },
    "1723": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1725": {
      "op": "ADD"
    },
    "1726": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3729
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x24E"
    },
    "1729": {
      "op": "JUMP"
    },
    "1730": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3729
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1731": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3762,
        3780
      ],
      "op": "DUP7",
      "path": "17"
    },
    "1732": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3791,
        3856
      ],
      "op": "PUSH2",
      "path": "17",
      "statement": 16,
      "value": "0x6D8"
    },
    "1735": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1737": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1739": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1741": {
      "op": "SHL"
    },
    "1742": {
      "op": "SUB"
    },
    "1743": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3791,
        3813
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1744": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3791,
        3813
      ],
      "op": "AND",
      "path": "17"
    },
    "1745": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3814,
        3824
      ],
      "op": "CALLER",
      "path": "17"
    },
    "1746": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3826,
        3847
      ],
      "op": "DUP10",
      "path": "17"
    },
    "1747": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3849,
        3855
      ],
      "op": "DUP10",
      "path": "17"
    },
    "1748": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3791,
        3813
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x95E"
    },
    "1751": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3791,
        3856
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1752": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3791,
        3856
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1753": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3867,
        3881
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1755": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3884,
        3900
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x6E2"
    },
    "1758": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3884,
        3898
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x8A1"
    },
    "1761": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3884,
        3900
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1762": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3884,
        3900
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1763": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3926
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 17,
      "value": "0x0"
    },
    "1765": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3926
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1766": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3926
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1767": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3926
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1768": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3915
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3"
    },
    "1770": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3926
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1772": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3926
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1773": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3926
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1775": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3926
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1776": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3926
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1777": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3926
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1778": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3926
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1779": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3935
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1780": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3935
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1781": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3910,
        3935
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "1782": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "MLOAD",
      "path": "17",
      "statement": 18
    },
    "1783": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x24"
    },
    "1785": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1786": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "ADD",
      "path": "17"
    },
    "1787": {
      "op": "DUP6"
    },
    "1788": {
      "op": "SWAP1"
    },
    "1789": {
      "op": "MSTORE"
    },
    "1790": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1792": {
      "op": "DUP2"
    },
    "1793": {
      "op": "ADD"
    },
    "1794": {
      "op": "DUP3"
    },
    "1795": {
      "op": "SWAP1"
    },
    "1796": {
      "op": "MSTORE"
    },
    "1797": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4092,
        4105
      ],
      "op": "CHAINID",
      "path": "17"
    },
    "1798": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1800": {
      "op": "DUP3"
    },
    "1801": {
      "op": "ADD"
    },
    "1802": {
      "op": "MSTORE"
    },
    "1803": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1805": {
      "op": "DUP2"
    },
    "1806": {
      "op": "ADD"
    },
    "1807": {
      "op": "DUP13"
    },
    "1808": {
      "op": "SWAP1"
    },
    "1809": {
      "op": "MSTORE"
    },
    "1810": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4122,
        4132
      ],
      "op": "CALLER",
      "path": "17"
    },
    "1811": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "1813": {
      "op": "DUP3"
    },
    "1814": {
      "op": "ADD"
    },
    "1815": {
      "op": "MSTORE"
    },
    "1816": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3867,
        3900
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1817": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3867,
        3900
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1818": {
      "op": "POP"
    },
    "1819": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1821": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1823": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1825": {
      "op": "SHL"
    },
    "1826": {
      "op": "SUB"
    },
    "1827": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        3955
      ],
      "op": "PUSH32",
      "path": "17",
      "value": "0x0"
    },
    "1860": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        3967
      ],
      "op": "AND",
      "path": "17"
    },
    "1861": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        3967
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1862": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        3967
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0xBB5DDB0F"
    },
    "1867": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        3967
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1868": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3981,
        3992
      ],
      "op": "DUP7",
      "path": "17"
    },
    "1869": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3981,
        3992
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1870": {
      "op": "PUSH1",
      "value": "0xC4"
    },
    "1872": {
      "op": "ADD"
    },
    "1873": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1875": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1876": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1877": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1879": {
      "op": "NOT"
    },
    "1880": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1881": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1882": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "SUB",
      "path": "17"
    },
    "1883": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "ADD",
      "path": "17"
    },
    "1884": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1885": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1886": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1887": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1888": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1889": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1891": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1892": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "ADD",
      "path": "17"
    },
    "1893": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1894": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1895": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1897": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1899": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1901": {
      "op": "SHL"
    },
    "1902": {
      "op": "SUB"
    },
    "1903": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "AND",
      "path": "17"
    },
    "1904": {
      "op": "PUSH4",
      "value": "0x14ADC787"
    },
    "1909": {
      "op": "PUSH1",
      "value": "0xE3"
    },
    "1911": {
      "op": "SHL"
    },
    "1912": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "OR",
      "path": "17"
    },
    "1913": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1914": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1915": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1916": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1918": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1920": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1922": {
      "op": "SHL"
    },
    "1923": {
      "op": "SUB"
    },
    "1924": {
      "op": "NOT"
    },
    "1925": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xE0"
    },
    "1927": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "DUP6",
      "path": "17"
    },
    "1928": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1929": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "SHL",
      "path": "17"
    },
    "1930": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "AND",
      "path": "17"
    },
    "1931": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1932": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1933": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x79A"
    },
    "1936": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "1937": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1938": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4006,
        4147
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1939": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1941": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "ADD",
      "path": "17"
    },
    "1942": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD6C"
    },
    "1945": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3946,
        4157
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1946": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1947": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1949": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1951": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1952": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1953": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1954": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "SUB",
      "path": "17"
    },
    "1955": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1956": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1958": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "DUP8",
      "path": "17"
    },
    "1959": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1960": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "EXTCODESIZE",
      "path": "17"
    },
    "1961": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1962": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1963": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1964": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x7B4"
    },
    "1967": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1968": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1970": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1971": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "REVERT",
      "path": "17"
    },
    "1972": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1973": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "POP",
      "path": "17"
    },
    "1974": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "GAS",
      "path": "17"
    },
    "1975": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "CALL",
      "path": "17"
    },
    "1976": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1977": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1978": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1979": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x7C8"
    },
    "1982": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1983": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "1984": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1986": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1987": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "RETURNDATACOPY",
      "path": "17"
    },
    "1988": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "1989": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1991": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "REVERT",
      "path": "17"
    },
    "1992": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        4157
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1993": {
      "op": "POP"
    },
    "1994": {
      "op": "POP"
    },
    "1995": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 19,
      "value": "0x40"
    },
    "1997": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1998": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1999": {
      "op": "DUP5"
    },
    "2000": {
      "op": "DUP2"
    },
    "2001": {
      "op": "MSTORE"
    },
    "2002": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4302,
        4312
      ],
      "op": "CALLER",
      "path": "17"
    },
    "2003": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2005": {
      "op": "DUP3"
    },
    "2006": {
      "op": "ADD"
    },
    "2007": {
      "op": "MSTORE"
    },
    "2008": {
      "op": "SWAP1"
    },
    "2009": {
      "op": "DUP2"
    },
    "2010": {
      "op": "ADD"
    },
    "2011": {
      "op": "DUP11"
    },
    "2012": {
      "op": "SWAP1"
    },
    "2013": {
      "op": "MSTORE"
    },
    "2014": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2016": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2018": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2020": {
      "op": "SHL"
    },
    "2021": {
      "op": "SUB"
    },
    "2022": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "DUP13",
      "path": "17"
    },
    "2023": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "AND",
      "path": "17"
    },
    "2024": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2025": {
      "op": "POP"
    },
    "2026": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4243,
        4256
      ],
      "op": "DUP13",
      "path": "17"
    },
    "2027": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4243,
        4256
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2028": {
      "op": "POP"
    },
    "2029": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4200,
        4209
      ],
      "op": "DUP6",
      "path": "17"
    },
    "2030": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4200,
        4209
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2031": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "PUSH32",
      "path": "17",
      "value": "0x2995401B199BC45EA8C8B79C27FB204B270CFB74444D546B1A100935E3443887"
    },
    "2064": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2065": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2067": {
      "op": "ADD"
    },
    "2068": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2070": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2071": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2072": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2073": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "SUB",
      "path": "17"
    },
    "2074": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2075": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4173,
        4342
      ],
      "op": "LOG4",
      "path": "17"
    },
    "2076": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4360,
        4366
      ],
      "op": "SWAP10",
      "path": "17",
      "statement": 20
    },
    "2077": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3100,
        4373
      ],
      "op": "SWAP9",
      "path": "17"
    },
    "2078": {
      "op": "POP"
    },
    "2079": {
      "op": "POP"
    },
    "2080": {
      "op": "POP"
    },
    "2081": {
      "op": "POP"
    },
    "2082": {
      "op": "POP"
    },
    "2083": {
      "op": "POP"
    },
    "2084": {
      "op": "POP"
    },
    "2085": {
      "op": "POP"
    },
    "2086": {
      "op": "POP"
    },
    "2087": {
      "fn": "FillManager.fillRequest",
      "jump": "o",
      "offset": [
        3100,
        4373
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2088": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2089": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x830"
    },
    "2092": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8B4"
    },
    "2095": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2096": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2097": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2099": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2101": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2103": {
      "op": "SHL"
    },
    "2104": {
      "op": "SUB"
    },
    "2105": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2169,
        2191
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 21
    },
    "2106": {
      "branch": 47,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2169,
        2191
      ],
      "op": "AND",
      "path": "0"
    },
    "2107": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x895"
    },
    "2110": {
      "branch": 47,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2111": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2113": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2114": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2118": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2120": {
      "op": "SHL"
    },
    "2121": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2122": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2123": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2125": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2127": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2128": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "ADD",
      "path": "0"
    },
    "2129": {
      "op": "MSTORE"
    },
    "2130": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "2132": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2134": {
      "op": "DUP3"
    },
    "2135": {
      "op": "ADD"
    },
    "2136": {
      "op": "MSTORE"
    },
    "2137": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "2170": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2172": {
      "op": "DUP3"
    },
    "2173": {
      "op": "ADD"
    },
    "2174": {
      "op": "MSTORE"
    },
    "2175": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "2182": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "2184": {
      "op": "SHL"
    },
    "2185": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2187": {
      "op": "DUP3"
    },
    "2188": {
      "op": "ADD"
    },
    "2189": {
      "op": "MSTORE"
    },
    "2190": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2192": {
      "op": "ADD"
    },
    "2193": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24E"
    },
    "2196": {
      "op": "JUMP"
    },
    "2197": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2198": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2244,
        2272
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 22,
      "value": "0x89E"
    },
    "2201": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2263,
        2271
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2202": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2244,
        2262
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x90E"
    },
    "2205": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2244,
        2272
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2206": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2244,
        2272
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2207": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "POP",
      "path": "0"
    },
    "2208": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2209": {
      "fn": "FillManager.generateFillId",
      "offset": [
        5879,
        5987
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2210": {
      "fn": "FillManager.generateFillId",
      "offset": [
        5927,
        5934
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2212": {
      "fn": "FillManager.generateFillId",
      "offset": [
        5963,
        5979
      ],
      "op": "PUSH2",
      "path": "17",
      "statement": 23,
      "value": "0x8AE"
    },
    "2215": {
      "fn": "FillManager.generateFillId",
      "offset": [
        5978,
        5979
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "2217": {
      "fn": "FillManager.generateFillId",
      "offset": [
        5963,
        5975
      ],
      "op": "NUMBER",
      "path": "17"
    },
    "2218": {
      "fn": "FillManager.generateFillId",
      "offset": [
        5963,
        5979
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD90"
    },
    "2221": {
      "fn": "FillManager.generateFillId",
      "jump": "i",
      "offset": [
        5963,
        5979
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2222": {
      "fn": "FillManager.generateFillId",
      "offset": [
        5963,
        5979
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2223": {
      "fn": "FillManager.generateFillId",
      "offset": [
        5953,
        5980
      ],
      "op": "BLOCKHASH",
      "path": "17"
    },
    "2224": {
      "fn": "FillManager.generateFillId",
      "offset": [
        5946,
        5980
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2225": {
      "fn": "FillManager.generateFillId",
      "offset": [
        5946,
        5980
      ],
      "op": "POP",
      "path": "17"
    },
    "2226": {
      "fn": "FillManager.generateFillId",
      "offset": [
        5879,
        5987
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2227": {
      "fn": "FillManager.generateFillId",
      "jump": "o",
      "offset": [
        5879,
        5987
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2228": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1359,
        1489
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2229": {
      "fn": "Ownable.owner",
      "offset": [
        1247,
        1254
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2231": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2232": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2234": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2236": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2238": {
      "op": "SHL"
    },
    "2239": {
      "op": "SUB"
    },
    "2240": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "AND",
      "path": "0"
    },
    "2241": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "8",
      "statement": 24
    },
    "2242": {
      "branch": 48,
      "fn": "Ownable._checkOwner",
      "offset": [
        1422,
        1445
      ],
      "op": "EQ",
      "path": "0",
      "statement": 25
    },
    "2243": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x55C"
    },
    "2246": {
      "branch": 48,
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2247": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2249": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2250": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2254": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2256": {
      "op": "SHL"
    },
    "2257": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2258": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2259": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2261": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2263": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2264": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "ADD",
      "path": "0"
    },
    "2265": {
      "op": "DUP2"
    },
    "2266": {
      "op": "SWAP1"
    },
    "2267": {
      "op": "MSTORE"
    },
    "2268": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2270": {
      "op": "DUP3"
    },
    "2271": {
      "op": "ADD"
    },
    "2272": {
      "op": "MSTORE"
    },
    "2273": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "2306": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2308": {
      "op": "DUP3"
    },
    "2309": {
      "op": "ADD"
    },
    "2310": {
      "op": "MSTORE"
    },
    "2311": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2313": {
      "op": "ADD"
    },
    "2314": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24E"
    },
    "2317": {
      "op": "JUMP"
    },
    "2318": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2433,
        2620
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2319": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2506,
        2522
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2321": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2322": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2323": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2327": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2329": {
      "op": "SHL"
    },
    "2330": {
      "op": "SUB"
    },
    "2331": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 26
    },
    "2332": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2333": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "AND",
      "path": "0"
    },
    "2334": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2336": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2338": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2340": {
      "op": "SHL"
    },
    "2341": {
      "op": "SUB"
    },
    "2342": {
      "op": "NOT"
    },
    "2343": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2344": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "AND",
      "path": "0"
    },
    "2345": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2346": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "OR",
      "path": "0"
    },
    "2347": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2348": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2349": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 27,
      "value": "0x40"
    },
    "2351": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2352": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2353": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2354": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2355": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "AND",
      "path": "0"
    },
    "2356": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2357": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2358": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2359": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "2392": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2393": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2506,
        2522
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2394": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "LOG3",
      "path": "0"
    },
    "2395": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2496,
        2620
      ],
      "op": "POP",
      "path": "0"
    },
    "2396": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2433,
        2620
      ],
      "op": "POP",
      "path": "0"
    },
    "2397": {
      "fn": "Ownable._transferOwnership",
      "jump": "o",
      "offset": [
        2433,
        2620
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2398": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        974,
        1215
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2399": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "PUSH1",
      "path": "6",
      "statement": 28,
      "value": "0x40"
    },
    "2401": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2402": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2403": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2405": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2407": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2409": {
      "op": "SHL"
    },
    "2410": {
      "op": "SUB"
    },
    "2411": {
      "op": "DUP6"
    },
    "2412": {
      "op": "DUP2"
    },
    "2413": {
      "op": "AND"
    },
    "2414": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x24"
    },
    "2416": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP4",
      "path": "6"
    },
    "2417": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "ADD",
      "path": "6"
    },
    "2418": {
      "op": "MSTORE"
    },
    "2419": {
      "op": "DUP5"
    },
    "2420": {
      "op": "AND"
    },
    "2421": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2423": {
      "op": "DUP3"
    },
    "2424": {
      "op": "ADD"
    },
    "2425": {
      "op": "MSTORE"
    },
    "2426": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2428": {
      "op": "DUP1"
    },
    "2429": {
      "op": "DUP3"
    },
    "2430": {
      "op": "ADD"
    },
    "2431": {
      "op": "DUP5"
    },
    "2432": {
      "op": "SWAP1"
    },
    "2433": {
      "op": "MSTORE"
    },
    "2434": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2435": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2436": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2437": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP4",
      "path": "6"
    },
    "2438": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SUB",
      "path": "6"
    },
    "2439": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2440": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2441": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "ADD",
      "path": "6"
    },
    "2442": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2443": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2444": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2446": {
      "op": "SWAP1"
    },
    "2447": {
      "op": "SWAP2"
    },
    "2448": {
      "op": "ADD"
    },
    "2449": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2450": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2451": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2452": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "2454": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2455": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "ADD",
      "path": "6"
    },
    "2456": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2457": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2458": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2460": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2462": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2464": {
      "op": "SHL"
    },
    "2465": {
      "op": "SUB"
    },
    "2466": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "AND",
      "path": "6"
    },
    "2467": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2472": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2474": {
      "op": "SHL"
    },
    "2475": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "OR",
      "path": "6"
    },
    "2476": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2477": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2478": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1112,
        1208
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x9B8"
    },
    "2481": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1112,
        1208
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2482": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1132,
        1137
      ],
      "op": "DUP6",
      "path": "6"
    },
    "2483": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1132,
        1137
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2484": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1112,
        1131
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x9BE"
    },
    "2487": {
      "fn": "SafeERC20.safeTransferFrom",
      "jump": "i",
      "offset": [
        1112,
        1208
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2488": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1112,
        1208
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2489": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        974,
        1215
      ],
      "op": "POP",
      "path": "6"
    },
    "2490": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        974,
        1215
      ],
      "op": "POP",
      "path": "6"
    },
    "2491": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        974,
        1215
      ],
      "op": "POP",
      "path": "6"
    },
    "2492": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        974,
        1215
      ],
      "op": "POP",
      "path": "6"
    },
    "2493": {
      "fn": "SafeERC20.safeTransferFrom",
      "jump": "o",
      "offset": [
        974,
        1215
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2494": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3747,
        4453
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2495": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4166,
        4189
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2497": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xA13"
    },
    "2500": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4220,
        4224
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2501": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2503": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2504": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2505": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2507": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "ADD",
      "path": "6"
    },
    "2508": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2510": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2511": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2512": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "2514": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2515": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2516": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "2518": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "ADD",
      "path": "6"
    },
    "2519": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH32",
      "path": "6",
      "value": "0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
    },
    "2552": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2553": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2554": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "POP",
      "path": "6"
    },
    "2555": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4200,
        4205
      ],
      "op": "DUP6",
      "path": "6"
    },
    "2556": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2558": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2560": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2562": {
      "op": "SHL"
    },
    "2563": {
      "op": "SUB"
    },
    "2564": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4219
      ],
      "op": "AND",
      "path": "6"
    },
    "2565": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4219
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xA95"
    },
    "2568": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4219
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2569": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "SWAP3",
      "path": "6"
    },
    "2570": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2571": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2572": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0xFFFFFFFF"
    },
    "2577": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "AND",
      "path": "6"
    },
    "2578": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        4192,
        4261
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2579": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2580": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4275,
        4292
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2581": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4275,
        4292
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2582": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4166,
        4261
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2583": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4166,
        4261
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2584": {
      "op": "POP"
    },
    "2585": {
      "branch": 49,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4275,
        4296
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "2586": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4271,
        4447
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xA90"
    },
    "2589": {
      "branch": 49,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4271,
        4447
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2590": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4370,
        4380
      ],
      "op": "DUP1",
      "path": "6",
      "statement": 29
    },
    "2591": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2592": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "2594": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "ADD",
      "path": "6"
    },
    "2595": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2596": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2597": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2598": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "ADD",
      "path": "6"
    },
    "2599": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2600": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xA31"
    },
    "2603": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2604": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2605": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xDB5"
    },
    "2608": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        4359,
        4389
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2609": {
      "branch": 50,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2610": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xA90"
    },
    "2613": {
      "branch": 50,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2614": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2616": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2617": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2621": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2623": {
      "op": "SHL"
    },
    "2624": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2625": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2626": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2628": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "2630": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2631": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "ADD",
      "path": "6"
    },
    "2632": {
      "op": "MSTORE"
    },
    "2633": {
      "op": "PUSH1",
      "value": "0x2A"
    },
    "2635": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2637": {
      "op": "DUP3"
    },
    "2638": {
      "op": "ADD"
    },
    "2639": {
      "op": "MSTORE"
    },
    "2640": {
      "op": "PUSH32",
      "value": "0x5361666545524332303A204552433230206F7065726174696F6E20646964206E"
    },
    "2673": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2675": {
      "op": "DUP3"
    },
    "2676": {
      "op": "ADD"
    },
    "2677": {
      "op": "MSTORE"
    },
    "2678": {
      "op": "PUSH10",
      "value": "0x1BDD081CDD58D8D95959"
    },
    "2689": {
      "op": "PUSH1",
      "value": "0xB2"
    },
    "2691": {
      "op": "SHL"
    },
    "2692": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2694": {
      "op": "DUP3"
    },
    "2695": {
      "op": "ADD"
    },
    "2696": {
      "op": "MSTORE"
    },
    "2697": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2699": {
      "op": "ADD"
    },
    "2700": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x24E"
    },
    "2703": {
      "op": "JUMP"
    },
    "2704": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2705": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3817,
        4453
      ],
      "op": "POP",
      "path": "6"
    },
    "2706": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3747,
        4453
      ],
      "op": "POP",
      "path": "6"
    },
    "2707": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3747,
        4453
      ],
      "op": "POP",
      "path": "6"
    },
    "2708": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "o",
      "offset": [
        3747,
        4453
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2709": {
      "fn": "Address.functionCall",
      "offset": [
        3873,
        4096
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "2710": {
      "fn": "Address.functionCall",
      "offset": [
        4006,
        4018
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x60"
    },
    "2712": {
      "fn": "Address.functionCall",
      "offset": [
        4037,
        4089
      ],
      "op": "PUSH2",
      "path": "7",
      "statement": 30,
      "value": "0xAA4"
    },
    "2715": {
      "fn": "Address.functionCall",
      "offset": [
        4059,
        4065
      ],
      "op": "DUP5",
      "path": "7"
    },
    "2716": {
      "fn": "Address.functionCall",
      "offset": [
        4067,
        4071
      ],
      "op": "DUP5",
      "path": "7"
    },
    "2717": {
      "fn": "Address.functionCall",
      "offset": [
        4073,
        4074
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "2719": {
      "fn": "Address.functionCall",
      "offset": [
        4076,
        4088
      ],
      "op": "DUP6",
      "path": "7"
    },
    "2720": {
      "fn": "Address.functionCall",
      "offset": [
        4037,
        4058
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xAAC"
    },
    "2723": {
      "fn": "Address.functionCall",
      "jump": "i",
      "offset": [
        4037,
        4089
      ],
      "op": "JUMP",
      "path": "7"
    },
    "2724": {
      "fn": "Address.functionCall",
      "offset": [
        4037,
        4089
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "2725": {
      "fn": "Address.functionCall",
      "offset": [
        4030,
        4089
      ],
      "op": "SWAP5",
      "path": "7"
    },
    "2726": {
      "fn": "Address.functionCall",
      "offset": [
        3873,
        4096
      ],
      "op": "SWAP4",
      "path": "7"
    },
    "2727": {
      "op": "POP"
    },
    "2728": {
      "op": "POP"
    },
    "2729": {
      "op": "POP"
    },
    "2730": {
      "op": "POP"
    },
    "2731": {
      "fn": "Address.functionCall",
      "jump": "o",
      "offset": [
        3873,
        4096
      ],
      "op": "JUMP",
      "path": "7"
    },
    "2732": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4960,
        5406
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "2733": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5125,
        5137
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x60"
    },
    "2735": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5182,
        5187
      ],
      "op": "DUP3",
      "path": "7",
      "statement": 31
    },
    "2736": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5157,
        5178
      ],
      "op": "SELFBALANCE",
      "path": "7"
    },
    "2737": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5157,
        5187
      ],
      "op": "LT",
      "path": "7"
    },
    "2738": {
      "branch": 42,
      "fn": "Address.functionCallWithValue",
      "offset": [
        5157,
        5187
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "2739": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5149,
        5230
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xB0D"
    },
    "2742": {
      "branch": 42,
      "fn": "Address.functionCallWithValue",
      "offset": [
        5149,
        5230
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "2743": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5149,
        5230
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "2745": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5149,
        5230
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "2746": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2750": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2752": {
      "op": "SHL"
    },
    "2753": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5149,
        5230
      ],
      "op": "DUP2",
      "path": "7"
    },
    "2754": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5149,
        5230
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "2755": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2757": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5149,
        5230
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "2759": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5149,
        5230
      ],
      "op": "DUP3",
      "path": "7"
    },
    "2760": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5149,
        5230
      ],
      "op": "ADD",
      "path": "7"
    },
    "2761": {
      "op": "MSTORE"
    },
    "2762": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "2764": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2766": {
      "op": "DUP3"
    },
    "2767": {
      "op": "ADD"
    },
    "2768": {
      "op": "MSTORE"
    },
    "2769": {
      "op": "PUSH32",
      "value": "0x416464726573733A20696E73756666696369656E742062616C616E636520666F"
    },
    "2802": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2804": {
      "op": "DUP3"
    },
    "2805": {
      "op": "ADD"
    },
    "2806": {
      "op": "MSTORE"
    },
    "2807": {
      "op": "PUSH6",
      "value": "0x1C8818D85B1B"
    },
    "2814": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "2816": {
      "op": "SHL"
    },
    "2817": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2819": {
      "op": "DUP3"
    },
    "2820": {
      "op": "ADD"
    },
    "2821": {
      "op": "MSTORE"
    },
    "2822": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2824": {
      "op": "ADD"
    },
    "2825": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5149,
        5230
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x24E"
    },
    "2828": {
      "op": "JUMP"
    },
    "2829": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5149,
        5230
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "2830": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5241,
        5253
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "2832": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5255,
        5278
      ],
      "op": "DUP1",
      "path": "7"
    },
    "2833": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5288
      ],
      "op": "DUP7",
      "path": "7"
    },
    "2834": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2836": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2838": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2840": {
      "op": "SHL"
    },
    "2841": {
      "op": "SUB"
    },
    "2842": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5293
      ],
      "op": "AND",
      "path": "7"
    },
    "2843": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5301,
        5306
      ],
      "op": "DUP6",
      "path": "7"
    },
    "2844": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5308,
        5312
      ],
      "op": "DUP8",
      "path": "7"
    },
    "2845": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "2847": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "2848": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xB29"
    },
    "2851": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "2852": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "2853": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xDD7"
    },
    "2856": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5282,
        5313
      ],
      "op": "JUMP",
      "path": "7"
    },
    "2857": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "2858": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "2860": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "2862": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "2863": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "DUP1",
      "path": "7"
    },
    "2864": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "DUP4",
      "path": "7"
    },
    "2865": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "SUB",
      "path": "7"
    },
    "2866": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "DUP2",
      "path": "7"
    },
    "2867": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "DUP6",
      "path": "7"
    },
    "2868": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "DUP8",
      "path": "7"
    },
    "2869": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "GAS",
      "path": "7"
    },
    "2870": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "CALL",
      "path": "7"
    },
    "2871": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "SWAP3",
      "path": "7"
    },
    "2872": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "POP",
      "path": "7"
    },
    "2873": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "POP",
      "path": "7"
    },
    "2874": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "POP",
      "path": "7"
    },
    "2875": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "2876": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "DUP1",
      "path": "7"
    },
    "2877": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "2879": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "DUP2",
      "path": "7"
    },
    "2880": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "EQ",
      "path": "7"
    },
    "2881": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xB66"
    },
    "2884": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "2885": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "2887": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "2888": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "2889": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "POP",
      "path": "7"
    },
    "2890": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1F"
    },
    "2892": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "NOT",
      "path": "7"
    },
    "2893": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x3F"
    },
    "2895": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "2896": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "ADD",
      "path": "7"
    },
    "2897": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "AND",
      "path": "7"
    },
    "2898": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "DUP3",
      "path": "7"
    },
    "2899": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "ADD",
      "path": "7"
    },
    "2900": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "2902": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "2903": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "2904": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "DUP3",
      "path": "7"
    },
    "2905": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "2906": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "2907": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "2909": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "2911": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "DUP5",
      "path": "7"
    },
    "2912": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "ADD",
      "path": "7"
    },
    "2913": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "RETURNDATACOPY",
      "path": "7"
    },
    "2914": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xB6B"
    },
    "2917": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "JUMP",
      "path": "7"
    },
    "2918": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "2919": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x60"
    },
    "2921": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "2922": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "POP",
      "path": "7"
    },
    "2923": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "2924": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5282,
        5313
      ],
      "op": "POP",
      "path": "7"
    },
    "2925": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5240,
        5313
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "2926": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5240,
        5313
      ],
      "op": "POP",
      "path": "7"
    },
    "2927": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5240,
        5313
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "2928": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5240,
        5313
      ],
      "op": "POP",
      "path": "7"
    },
    "2929": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5330,
        5399
      ],
      "op": "PUSH2",
      "path": "7",
      "statement": 32,
      "value": "0xB7C"
    },
    "2932": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5357,
        5363
      ],
      "op": "DUP8",
      "path": "7"
    },
    "2933": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5365,
        5372
      ],
      "op": "DUP4",
      "path": "7"
    },
    "2934": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5374,
        5384
      ],
      "op": "DUP4",
      "path": "7"
    },
    "2935": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5386,
        5398
      ],
      "op": "DUP8",
      "path": "7"
    },
    "2936": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5330,
        5356
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xB87"
    },
    "2939": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5330,
        5399
      ],
      "op": "JUMP",
      "path": "7"
    },
    "2940": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5330,
        5399
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "2941": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5323,
        5399
      ],
      "op": "SWAP8",
      "path": "7"
    },
    "2942": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4960,
        5406
      ],
      "op": "SWAP7",
      "path": "7"
    },
    "2943": {
      "op": "POP"
    },
    "2944": {
      "op": "POP"
    },
    "2945": {
      "op": "POP"
    },
    "2946": {
      "op": "POP"
    },
    "2947": {
      "op": "POP"
    },
    "2948": {
      "op": "POP"
    },
    "2949": {
      "op": "POP"
    },
    "2950": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4960,
        5406
      ],
      "op": "JUMP",
      "path": "7"
    },
    "2951": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7466,
        8094
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "2952": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7646,
        7658
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x60"
    },
    "2954": {
      "branch": 43,
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7674,
        7681
      ],
      "op": "DUP4",
      "path": "7"
    },
    "2955": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7670,
        8088
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "2956": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7670,
        8088
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xBF6"
    },
    "2959": {
      "branch": 43,
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7670,
        8088
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "2960": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7701,
        7711
      ],
      "op": "DUP3",
      "path": "7"
    },
    "2961": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7701,
        7718
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "2962": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7722,
        7723
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "2964": {
      "branch": 44,
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7701,
        7723
      ],
      "op": "SUB",
      "path": "7"
    },
    "2965": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7697,
        7983
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xBEF"
    },
    "2968": {
      "branch": 44,
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7697,
        7983
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "2969": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2971": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2973": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2975": {
      "op": "SHL"
    },
    "2976": {
      "op": "SUB"
    },
    "2977": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "DUP6",
      "path": "7",
      "statement": 33
    },
    "2978": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "AND",
      "path": "7"
    },
    "2979": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "EXTCODESIZE",
      "path": "7"
    },
    "2980": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7908,
        7968
      ],
      "op": "PUSH2",
      "path": "7",
      "statement": 34,
      "value": "0xBEF"
    },
    "2983": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7908,
        7968
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "2984": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7908,
        7968
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "2986": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7908,
        7968
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "2987": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2991": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2993": {
      "op": "SHL"
    },
    "2994": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7908,
        7968
      ],
      "op": "DUP2",
      "path": "7"
    },
    "2995": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7908,
        7968
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "2996": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2998": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7908,
        7968
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "3000": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7908,
        7968
      ],
      "op": "DUP3",
      "path": "7"
    },
    "3001": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7908,
        7968
      ],
      "op": "ADD",
      "path": "7"
    },
    "3002": {
      "op": "MSTORE"
    },
    "3003": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "3005": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3007": {
      "op": "DUP3"
    },
    "3008": {
      "op": "ADD"
    },
    "3009": {
      "op": "MSTORE"
    },
    "3010": {
      "op": "PUSH32",
      "value": "0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
    },
    "3043": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3045": {
      "op": "DUP3"
    },
    "3046": {
      "op": "ADD"
    },
    "3047": {
      "op": "MSTORE"
    },
    "3048": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3050": {
      "op": "ADD"
    },
    "3051": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7908,
        7968
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x24E"
    },
    "3054": {
      "op": "JUMP"
    },
    "3055": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7908,
        7968
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "3056": {
      "op": "POP"
    },
    "3057": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        8003,
        8013
      ],
      "op": "DUP2",
      "path": "7",
      "statement": 35
    },
    "3058": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7996,
        8013
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xAA4"
    },
    "3061": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7996,
        8013
      ],
      "op": "JUMP",
      "path": "7"
    },
    "3062": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        7670,
        8088
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "3063": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        8044,
        8077
      ],
      "op": "PUSH2",
      "path": "7",
      "statement": 36,
      "value": "0xAA4"
    },
    "3066": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        8052,
        8062
      ],
      "op": "DUP4",
      "path": "7"
    },
    "3067": {
      "fn": "Address.verifyCallResultFromTarget",
      "offset": [
        8064,
        8076
      ],
      "op": "DUP4",
      "path": "7"
    },
    "3068": {
      "fn": "Address._revert",
      "offset": [
        8775,
        8792
      ],
      "op": "DUP2",
      "path": "7"
    },
    "3069": {
      "fn": "Address._revert",
      "offset": [
        8775,
        8792
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "3070": {
      "branch": 45,
      "fn": "Address._revert",
      "offset": [
        8775,
        8796
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "3071": {
      "fn": "Address._revert",
      "offset": [
        8771,
        9150
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xC0B"
    },
    "3074": {
      "branch": 45,
      "fn": "Address._revert",
      "offset": [
        8771,
        9150
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "3075": {
      "fn": "Address._revert",
      "offset": [
        9003,
        9013
      ],
      "op": "DUP2",
      "path": "7"
    },
    "3076": {
      "fn": "Address._revert",
      "offset": [
        8997,
        9014
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "3077": {
      "fn": "Address._revert",
      "offset": [
        9059,
        9074
      ],
      "op": "DUP1",
      "path": "7"
    },
    "3078": {
      "fn": "Address._revert",
      "offset": [
        9046,
        9056
      ],
      "op": "DUP4",
      "path": "7"
    },
    "3079": {
      "fn": "Address._revert",
      "offset": [
        9042,
        9044
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "3081": {
      "fn": "Address._revert",
      "offset": [
        9038,
        9057
      ],
      "op": "ADD",
      "path": "7"
    },
    "3082": {
      "fn": "Address._revert",
      "offset": [
        9031,
        9075
      ],
      "op": "REVERT",
      "path": "7"
    },
    "3083": {
      "fn": "Address._revert",
      "offset": [
        8771,
        9150
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "3084": {
      "fn": "Address._revert",
      "offset": [
        9126,
        9138
      ],
      "op": "DUP1",
      "path": "7",
      "statement": 37
    },
    "3085": {
      "fn": "Address._revert",
      "offset": [
        9119,
        9139
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "3087": {
      "fn": "Address._revert",
      "offset": [
        9119,
        9139
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "3088": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3092": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3094": {
      "op": "SHL"
    },
    "3095": {
      "fn": "Address._revert",
      "offset": [
        9119,
        9139
      ],
      "op": "DUP2",
      "path": "7"
    },
    "3096": {
      "fn": "Address._revert",
      "offset": [
        9119,
        9139
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "3097": {
      "fn": "Address._revert",
      "offset": [
        9119,
        9139
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "3099": {
      "fn": "Address._revert",
      "offset": [
        9119,
        9139
      ],
      "op": "ADD",
      "path": "7"
    },
    "3100": {
      "fn": "Address._revert",
      "offset": [
        9119,
        9139
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x24E"
    },
    "3103": {
      "fn": "Address._revert",
      "offset": [
        9119,
        9139
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "3104": {
      "fn": "Address._revert",
      "offset": [
        9119,
        9139
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "3105": {
      "fn": "Address._revert",
      "offset": [
        9119,
        9139
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xDF3"
    },
    "3108": {
      "fn": "Address._revert",
      "jump": "i",
      "offset": [
        9119,
        9139
      ],
      "op": "JUMP",
      "path": "7"
    },
    "3109": {
      "op": "JUMPDEST"
    },
    "3110": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3112": {
      "op": "DUP1"
    },
    "3113": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3115": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3117": {
      "op": "DUP5"
    },
    "3118": {
      "op": "DUP7"
    },
    "3119": {
      "op": "SUB"
    },
    "3120": {
      "op": "SLT"
    },
    "3121": {
      "op": "ISZERO"
    },
    "3122": {
      "op": "PUSH2",
      "value": "0xC3A"
    },
    "3125": {
      "op": "JUMPI"
    },
    "3126": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3128": {
      "op": "DUP1"
    },
    "3129": {
      "op": "REVERT"
    },
    "3130": {
      "op": "JUMPDEST"
    },
    "3131": {
      "op": "POP"
    },
    "3132": {
      "op": "POP"
    },
    "3133": {
      "op": "DUP2"
    },
    "3134": {
      "op": "CALLDATALOAD"
    },
    "3135": {
      "op": "SWAP4"
    },
    "3136": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3138": {
      "op": "DUP4"
    },
    "3139": {
      "op": "ADD"
    },
    "3140": {
      "op": "CALLDATALOAD"
    },
    "3141": {
      "op": "SWAP4"
    },
    "3142": {
      "op": "POP"
    },
    "3143": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3145": {
      "op": "SWAP1"
    },
    "3146": {
      "op": "SWAP3"
    },
    "3147": {
      "op": "ADD"
    },
    "3148": {
      "op": "CALLDATALOAD"
    },
    "3149": {
      "op": "SWAP2"
    },
    "3150": {
      "op": "SWAP1"
    },
    "3151": {
      "op": "POP"
    },
    "3152": {
      "jump": "o",
      "op": "JUMP"
    },
    "3153": {
      "op": "JUMPDEST"
    },
    "3154": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3156": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3158": {
      "op": "DUP3"
    },
    "3159": {
      "op": "DUP5"
    },
    "3160": {
      "op": "SUB"
    },
    "3161": {
      "op": "SLT"
    },
    "3162": {
      "op": "ISZERO"
    },
    "3163": {
      "op": "PUSH2",
      "value": "0xC63"
    },
    "3166": {
      "op": "JUMPI"
    },
    "3167": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3169": {
      "op": "DUP1"
    },
    "3170": {
      "op": "REVERT"
    },
    "3171": {
      "op": "JUMPDEST"
    },
    "3172": {
      "op": "POP"
    },
    "3173": {
      "op": "CALLDATALOAD"
    },
    "3174": {
      "op": "SWAP2"
    },
    "3175": {
      "op": "SWAP1"
    },
    "3176": {
      "op": "POP"
    },
    "3177": {
      "jump": "o",
      "op": "JUMP"
    },
    "3178": {
      "op": "JUMPDEST"
    },
    "3179": {
      "op": "DUP1"
    },
    "3180": {
      "op": "CALLDATALOAD"
    },
    "3181": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3183": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3185": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3187": {
      "op": "SHL"
    },
    "3188": {
      "op": "SUB"
    },
    "3189": {
      "op": "DUP2"
    },
    "3190": {
      "op": "AND"
    },
    "3191": {
      "op": "DUP2"
    },
    "3192": {
      "op": "EQ"
    },
    "3193": {
      "op": "PUSH2",
      "value": "0xC81"
    },
    "3196": {
      "op": "JUMPI"
    },
    "3197": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3199": {
      "op": "DUP1"
    },
    "3200": {
      "op": "REVERT"
    },
    "3201": {
      "op": "JUMPDEST"
    },
    "3202": {
      "op": "SWAP2"
    },
    "3203": {
      "op": "SWAP1"
    },
    "3204": {
      "op": "POP"
    },
    "3205": {
      "jump": "o",
      "op": "JUMP"
    },
    "3206": {
      "op": "JUMPDEST"
    },
    "3207": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3209": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3211": {
      "op": "DUP3"
    },
    "3212": {
      "op": "DUP5"
    },
    "3213": {
      "op": "SUB"
    },
    "3214": {
      "op": "SLT"
    },
    "3215": {
      "op": "ISZERO"
    },
    "3216": {
      "op": "PUSH2",
      "value": "0xC98"
    },
    "3219": {
      "op": "JUMPI"
    },
    "3220": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3222": {
      "op": "DUP1"
    },
    "3223": {
      "op": "REVERT"
    },
    "3224": {
      "op": "JUMPDEST"
    },
    "3225": {
      "op": "PUSH2",
      "value": "0xCA1"
    },
    "3228": {
      "op": "DUP3"
    },
    "3229": {
      "op": "PUSH2",
      "value": "0xC6A"
    },
    "3232": {
      "jump": "i",
      "op": "JUMP"
    },
    "3233": {
      "op": "JUMPDEST"
    },
    "3234": {
      "op": "SWAP4"
    },
    "3235": {
      "op": "SWAP3"
    },
    "3236": {
      "op": "POP"
    },
    "3237": {
      "op": "POP"
    },
    "3238": {
      "op": "POP"
    },
    "3239": {
      "jump": "o",
      "op": "JUMP"
    },
    "3240": {
      "op": "JUMPDEST"
    },
    "3241": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3243": {
      "op": "DUP1"
    },
    "3244": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3246": {
      "op": "DUP1"
    },
    "3247": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3249": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3251": {
      "op": "DUP7"
    },
    "3252": {
      "op": "DUP9"
    },
    "3253": {
      "op": "SUB"
    },
    "3254": {
      "op": "SLT"
    },
    "3255": {
      "op": "ISZERO"
    },
    "3256": {
      "op": "PUSH2",
      "value": "0xCC0"
    },
    "3259": {
      "op": "JUMPI"
    },
    "3260": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3262": {
      "op": "DUP1"
    },
    "3263": {
      "op": "REVERT"
    },
    "3264": {
      "op": "JUMPDEST"
    },
    "3265": {
      "op": "DUP6"
    },
    "3266": {
      "op": "CALLDATALOAD"
    },
    "3267": {
      "op": "SWAP5"
    },
    "3268": {
      "op": "POP"
    },
    "3269": {
      "op": "PUSH2",
      "value": "0xCD0"
    },
    "3272": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3274": {
      "op": "DUP8"
    },
    "3275": {
      "op": "ADD"
    },
    "3276": {
      "op": "PUSH2",
      "value": "0xC6A"
    },
    "3279": {
      "jump": "i",
      "op": "JUMP"
    },
    "3280": {
      "op": "JUMPDEST"
    },
    "3281": {
      "op": "SWAP4"
    },
    "3282": {
      "op": "POP"
    },
    "3283": {
      "op": "PUSH2",
      "value": "0xCDE"
    },
    "3286": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3288": {
      "op": "DUP8"
    },
    "3289": {
      "op": "ADD"
    },
    "3290": {
      "op": "PUSH2",
      "value": "0xC6A"
    },
    "3293": {
      "jump": "i",
      "op": "JUMP"
    },
    "3294": {
      "op": "JUMPDEST"
    },
    "3295": {
      "op": "SWAP3"
    },
    "3296": {
      "op": "POP"
    },
    "3297": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3299": {
      "op": "DUP7"
    },
    "3300": {
      "op": "ADD"
    },
    "3301": {
      "op": "CALLDATALOAD"
    },
    "3302": {
      "op": "SWAP2"
    },
    "3303": {
      "op": "POP"
    },
    "3304": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3306": {
      "op": "DUP7"
    },
    "3307": {
      "op": "ADD"
    },
    "3308": {
      "op": "CALLDATALOAD"
    },
    "3309": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "3322": {
      "op": "DUP2"
    },
    "3323": {
      "op": "AND"
    },
    "3324": {
      "op": "DUP2"
    },
    "3325": {
      "op": "EQ"
    },
    "3326": {
      "op": "PUSH2",
      "value": "0xD06"
    },
    "3329": {
      "op": "JUMPI"
    },
    "3330": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3332": {
      "op": "DUP1"
    },
    "3333": {
      "op": "REVERT"
    },
    "3334": {
      "op": "JUMPDEST"
    },
    "3335": {
      "op": "DUP1"
    },
    "3336": {
      "op": "SWAP2"
    },
    "3337": {
      "op": "POP"
    },
    "3338": {
      "op": "POP"
    },
    "3339": {
      "op": "SWAP3"
    },
    "3340": {
      "op": "SWAP6"
    },
    "3341": {
      "op": "POP"
    },
    "3342": {
      "op": "SWAP3"
    },
    "3343": {
      "op": "SWAP6"
    },
    "3344": {
      "op": "SWAP1"
    },
    "3345": {
      "op": "SWAP4"
    },
    "3346": {
      "op": "POP"
    },
    "3347": {
      "jump": "o",
      "op": "JUMP"
    },
    "3348": {
      "op": "JUMPDEST"
    },
    "3349": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3351": {
      "op": "JUMPDEST"
    },
    "3352": {
      "op": "DUP4"
    },
    "3353": {
      "op": "DUP2"
    },
    "3354": {
      "op": "LT"
    },
    "3355": {
      "op": "ISZERO"
    },
    "3356": {
      "op": "PUSH2",
      "value": "0xD2F"
    },
    "3359": {
      "op": "JUMPI"
    },
    "3360": {
      "op": "DUP2"
    },
    "3361": {
      "op": "DUP2"
    },
    "3362": {
      "op": "ADD"
    },
    "3363": {
      "op": "MLOAD"
    },
    "3364": {
      "op": "DUP4"
    },
    "3365": {
      "op": "DUP3"
    },
    "3366": {
      "op": "ADD"
    },
    "3367": {
      "op": "MSTORE"
    },
    "3368": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3370": {
      "op": "ADD"
    },
    "3371": {
      "op": "PUSH2",
      "value": "0xD17"
    },
    "3374": {
      "op": "JUMP"
    },
    "3375": {
      "op": "JUMPDEST"
    },
    "3376": {
      "op": "DUP4"
    },
    "3377": {
      "op": "DUP2"
    },
    "3378": {
      "op": "GT"
    },
    "3379": {
      "op": "ISZERO"
    },
    "3380": {
      "op": "PUSH2",
      "value": "0x9B8"
    },
    "3383": {
      "op": "JUMPI"
    },
    "3384": {
      "op": "POP"
    },
    "3385": {
      "op": "POP"
    },
    "3386": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3388": {
      "op": "SWAP2"
    },
    "3389": {
      "op": "ADD"
    },
    "3390": {
      "op": "MSTORE"
    },
    "3391": {
      "jump": "o",
      "op": "JUMP"
    },
    "3392": {
      "op": "JUMPDEST"
    },
    "3393": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3395": {
      "op": "DUP2"
    },
    "3396": {
      "op": "MLOAD"
    },
    "3397": {
      "op": "DUP1"
    },
    "3398": {
      "op": "DUP5"
    },
    "3399": {
      "op": "MSTORE"
    },
    "3400": {
      "op": "PUSH2",
      "value": "0xD58"
    },
    "3403": {
      "op": "DUP2"
    },
    "3404": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3406": {
      "op": "DUP7"
    },
    "3407": {
      "op": "ADD"
    },
    "3408": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3410": {
      "op": "DUP7"
    },
    "3411": {
      "op": "ADD"
    },
    "3412": {
      "op": "PUSH2",
      "value": "0xD14"
    },
    "3415": {
      "jump": "i",
      "op": "JUMP"
    },
    "3416": {
      "op": "JUMPDEST"
    },
    "3417": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3419": {
      "op": "ADD"
    },
    "3420": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3422": {
      "op": "NOT"
    },
    "3423": {
      "op": "AND"
    },
    "3424": {
      "op": "SWAP3"
    },
    "3425": {
      "op": "SWAP1"
    },
    "3426": {
      "op": "SWAP3"
    },
    "3427": {
      "op": "ADD"
    },
    "3428": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3430": {
      "op": "ADD"
    },
    "3431": {
      "op": "SWAP3"
    },
    "3432": {
      "op": "SWAP2"
    },
    "3433": {
      "op": "POP"
    },
    "3434": {
      "op": "POP"
    },
    "3435": {
      "jump": "o",
      "op": "JUMP"
    },
    "3436": {
      "op": "JUMPDEST"
    },
    "3437": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3439": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3441": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3443": {
      "op": "SHL"
    },
    "3444": {
      "op": "SUB"
    },
    "3445": {
      "op": "DUP4"
    },
    "3446": {
      "op": "AND"
    },
    "3447": {
      "op": "DUP2"
    },
    "3448": {
      "op": "MSTORE"
    },
    "3449": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3451": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3453": {
      "op": "DUP3"
    },
    "3454": {
      "op": "ADD"
    },
    "3455": {
      "op": "DUP2"
    },
    "3456": {
      "op": "SWAP1"
    },
    "3457": {
      "op": "MSTORE"
    },
    "3458": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3460": {
      "op": "SWAP1"
    },
    "3461": {
      "op": "PUSH2",
      "value": "0xAA4"
    },
    "3464": {
      "op": "SWAP1"
    },
    "3465": {
      "op": "DUP4"
    },
    "3466": {
      "op": "ADD"
    },
    "3467": {
      "op": "DUP5"
    },
    "3468": {
      "op": "PUSH2",
      "value": "0xD40"
    },
    "3471": {
      "jump": "i",
      "op": "JUMP"
    },
    "3472": {
      "op": "JUMPDEST"
    },
    "3473": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3475": {
      "op": "DUP3"
    },
    "3476": {
      "op": "DUP3"
    },
    "3477": {
      "op": "LT"
    },
    "3478": {
      "op": "ISZERO"
    },
    "3479": {
      "op": "PUSH2",
      "value": "0xDB0"
    },
    "3482": {
      "op": "JUMPI"
    },
    "3483": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3488": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3490": {
      "op": "SHL"
    },
    "3491": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3493": {
      "op": "MSTORE"
    },
    "3494": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3496": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3498": {
      "op": "MSTORE"
    },
    "3499": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3501": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3503": {
      "op": "REVERT"
    },
    "3504": {
      "op": "JUMPDEST"
    },
    "3505": {
      "op": "POP"
    },
    "3506": {
      "op": "SUB"
    },
    "3507": {
      "op": "SWAP1"
    },
    "3508": {
      "jump": "o",
      "op": "JUMP"
    },
    "3509": {
      "op": "JUMPDEST"
    },
    "3510": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3512": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3514": {
      "op": "DUP3"
    },
    "3515": {
      "op": "DUP5"
    },
    "3516": {
      "op": "SUB"
    },
    "3517": {
      "op": "SLT"
    },
    "3518": {
      "op": "ISZERO"
    },
    "3519": {
      "op": "PUSH2",
      "value": "0xDC7"
    },
    "3522": {
      "op": "JUMPI"
    },
    "3523": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3525": {
      "op": "DUP1"
    },
    "3526": {
      "op": "REVERT"
    },
    "3527": {
      "op": "JUMPDEST"
    },
    "3528": {
      "op": "DUP2"
    },
    "3529": {
      "op": "MLOAD"
    },
    "3530": {
      "op": "DUP1"
    },
    "3531": {
      "op": "ISZERO"
    },
    "3532": {
      "op": "ISZERO"
    },
    "3533": {
      "op": "DUP2"
    },
    "3534": {
      "op": "EQ"
    },
    "3535": {
      "op": "PUSH2",
      "value": "0xCA1"
    },
    "3538": {
      "op": "JUMPI"
    },
    "3539": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3541": {
      "op": "DUP1"
    },
    "3542": {
      "op": "REVERT"
    },
    "3543": {
      "op": "JUMPDEST"
    },
    "3544": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3546": {
      "op": "DUP3"
    },
    "3547": {
      "op": "MLOAD"
    },
    "3548": {
      "op": "PUSH2",
      "value": "0xDE9"
    },
    "3551": {
      "op": "DUP2"
    },
    "3552": {
      "op": "DUP5"
    },
    "3553": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3555": {
      "op": "DUP8"
    },
    "3556": {
      "op": "ADD"
    },
    "3557": {
      "op": "PUSH2",
      "value": "0xD14"
    },
    "3560": {
      "jump": "i",
      "op": "JUMP"
    },
    "3561": {
      "op": "JUMPDEST"
    },
    "3562": {
      "op": "SWAP2"
    },
    "3563": {
      "op": "SWAP1"
    },
    "3564": {
      "op": "SWAP2"
    },
    "3565": {
      "op": "ADD"
    },
    "3566": {
      "op": "SWAP3"
    },
    "3567": {
      "op": "SWAP2"
    },
    "3568": {
      "op": "POP"
    },
    "3569": {
      "op": "POP"
    },
    "3570": {
      "jump": "o",
      "op": "JUMP"
    },
    "3571": {
      "op": "JUMPDEST"
    },
    "3572": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3574": {
      "op": "DUP2"
    },
    "3575": {
      "op": "MSTORE"
    },
    "3576": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3578": {
      "op": "PUSH2",
      "value": "0xCA1"
    },
    "3581": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3583": {
      "op": "DUP4"
    },
    "3584": {
      "op": "ADD"
    },
    "3585": {
      "op": "DUP5"
    },
    "3586": {
      "op": "PUSH2",
      "value": "0xD40"
    },
    "3589": {
      "jump": "i",
      "op": "JUMP"
    }
  },
  "sha1": "5e2b9127cb5e416f5b9163432ab032e94e11aea5",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/token/ERC20/IERC20.sol\";\nimport \"OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/access/Ownable.sol\";\nimport \"./LpWhitelist.sol\";\nimport \"../interfaces/IMessenger.sol\";\nimport \"./BeamerUtils.sol\";\nimport \"./Resolver.sol\";\n\n/// The fill manager.\n///\n/// This contract is responsible for keeping track of filled requests. In addition to allowing\n/// agents to (eventually) prove that they filled requests, it also allows anyone to invalidate\n/// a claim that a request was filled.\n///\n/// It is the only contract that agents need to interact with on the target chain.\ncontract FillManager is Ownable, LpWhitelist {\n    using SafeERC20 for IERC20;\n\n    /// Emitted when a request has been filled.\n    ///\n    /// .. seealso:: :sol:func:`fillRequest`\n    event RequestFilled(\n        bytes32 indexed requestId,\n        bytes32 fillId,\n        uint256 indexed sourceChainId,\n        address indexed targetTokenAddress,\n        address filler,\n        uint256 amount\n    );\n\n    /// Emitted when a fill has been invalidated.\n    ///\n    /// .. seealso:: :sol:func:`invalidateFill`\n    event FillInvalidated(bytes32 indexed requestId, bytes32 indexed fillId);\n\n    // The messenger to send messages to L1\n    //\n    // It is used to send proofs to L1. The specific implementation of the\n    // :sol:interface:`IMessenger` interface is chain-dependent.\n    IMessenger public immutable messenger;\n\n    /// The L1 :sol:contract:`Resolver` contract to be used for L1 resolution.\n    address public l1Resolver;\n\n    /// Maps request IDs to fill IDs.\n    mapping(bytes32 => bytes32) public fills;\n\n    /// Constructor.\n    ///\n    /// @param _messenger The messenger.\n    constructor(address _messenger) {\n        messenger = IMessenger(_messenger);\n    }\n\n    /// Set the resolver's address\n    ///\n    /// Can only ever be set once. Before it is set, no fills or invalidations are possible\n    ///\n    /// @param _l1Resolver The L1 resolver address\n    function setResolver(address _l1Resolver) public onlyOwner {\n        require(l1Resolver == address(0), \"Resolver already set\");\n        l1Resolver = _l1Resolver;\n    }\n\n    /// Fill the specified request.\n    ///\n    /// The caller must have approved at least ``amount`` tokens for :sol:contract:`FillManager`\n    /// with the ERC20 token contract at ``targetTokenAddress``. The tokens will be immediately\n    /// sent to ``targetReceiverAddress`` and a fill proof will be generated, which can later\n    /// be used to trigger L1 resolution, if needed.\n    ///\n    /// @param sourceChainId The source chain ID.\n    /// @param targetTokenAddress Address of the token contract on the target chain.\n    /// @param targetReceiverAddress Recipient address on the target chain.\n    /// @param amount Amount of tokens to transfer. Does not include fees.\n    /// @param nonce The nonce used to create the request ID.\n    /// @return The fill ID.\n    function fillRequest(\n        uint256 sourceChainId,\n        address targetTokenAddress,\n        address targetReceiverAddress,\n        uint256 amount,\n        uint96 nonce\n    ) external onlyWhitelist returns (bytes32) {\n        address _l1Resolver = l1Resolver;\n        require(_l1Resolver != address(0), \"Resolver address not set\");\n        bytes32 requestId = BeamerUtils.createRequestId(\n            sourceChainId,\n            block.chainid,\n            targetTokenAddress,\n            targetReceiverAddress,\n            amount,\n            nonce\n        );\n\n        require(fills[requestId] == bytes32(0), \"Already filled\");\n\n        IERC20 token = IERC20(targetTokenAddress);\n        token.safeTransferFrom(msg.sender, targetReceiverAddress, amount);\n\n        bytes32 fillId = generateFillId();\n        fills[requestId] = fillId;\n\n        messenger.sendMessage(\n            _l1Resolver,\n            abi.encodeCall(\n                Resolver.resolve,\n                (requestId, fillId, block.chainid, sourceChainId, msg.sender)\n            )\n        );\n\n        emit RequestFilled(\n            requestId,\n            fillId,\n            sourceChainId,\n            targetTokenAddress,\n            msg.sender,\n            amount\n        );\n\n        return fillId;\n    }\n\n    /// Invalidate the specified fill.\n    ///\n    /// In cases that a claim has been made on the source chain, but without a corresponding fill\n    /// actually happening on the target chain, anyone can call this function to mark the fill\n    /// as invalid. This is typically followed by a challenge game on the source chain, which\n    /// the dishonest claimer is guaranteed to lose as soon as the information about the invalid\n    /// fill (so called \"non-fill proof\") is propagated to the source chain via L1 resolution.\n    ///\n    /// @param requestId The request ID.\n    /// @param fillId The fill ID.\n    /// @param sourceChainId The source chain ID.\n    function invalidateFill(\n        bytes32 requestId,\n        bytes32 fillId,\n        uint256 sourceChainId\n    ) external {\n        address _l1Resolver = l1Resolver;\n        require(_l1Resolver != address(0), \"Resolver address not set\");\n        require(fills[requestId] != fillId, \"Fill valid\");\n        require(\n            fillId != generateFillId(),\n            \"Cannot invalidate fills of current block\"\n        );\n\n        messenger.sendMessage(\n            _l1Resolver,\n            abi.encodeCall(\n                Resolver.resolve,\n                (requestId, fillId, block.chainid, sourceChainId, address(0))\n            )\n        );\n        emit FillInvalidated(requestId, fillId);\n    }\n\n    /// Generate a fill ID.\n    ///\n    /// The fill ID is defined as the previous block hash.\n    ///\n    /// @return The current fill ID\n    function generateFillId() private view returns (bytes32) {\n        return blockhash(block.number - 1);\n    }\n}\n",
  "sourceMap": "782:5207:17:-:0;;;1875:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;719:10:8;936:18:0;:32::i;:::-;-1:-1:-1;;;;;1917:34:17;;;782:5207;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;14:290:29:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:29;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:29:o;:::-;782:5207:17;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/contracts/FillManager.sol",
  "type": "contract"
}